Documentation Source:
release-1-7-2.dagster.dagster-docs.io/getting-started/create-new-project.txt

Documentation Title:
Creating a new Dagster project | Dagster Docs

Documentation Content:
Creating a new Dagster project | Dagster Docs
Ask AI
Platform
Dagster+
New
Pricing
Blog
Community
Docs
Sign in
Join us on Slack
Star us
Try Dagster+
Platform
Dagster+
Pricing
Blog
Community
Docs
Contact Sales
Sign in
Try Dagster+
Search
the docs
Press
Ctrl
and
K
to search
Getting started
What's Dagster?
Quickstart
Installation
Creating a new project
Getting help
Tutorial
Concepts
Deployment
Integrations
Guides
API Reference
About
1.7.2
/ 0.23.2 (libs)
You are viewing an unreleased or outdated version of the documentation
View Latest Documentation
→
Creating a new Dagster project
#
The easiest way to start building a Dagster project is by using the
dagster project
CLI. This CLI tool helps generate files and folder structures that enable you to quickly get started with Dagster.
Step 1: Bootstrap a new project
#
If you don't already have Dagster installed, verify you meet the
installation requirements
before continuing.
You can scaffold a new project using the default project skeleton, or start with one of the official Dagster examples.
To learn more about the default files in a Dagster project, refer to the
Dagster project file reference
.
Default project skeleton
Official example
Using the default project skeleton
#
To get started, run:
pip
install
dagster
dagster project scaffold --name my-dagster-project
The
dagster project scaffold
command generates a folder structure with a single Dagster code location and other files, such as
pyproject.toml
and
setup.py
. This takes care of setting things up with an empty project, enabling you to quickly get started.
Using an official example
#
To get started using an official Dagster example, run:
pip
install
dagster
dagster project from-example
\
--name my-dagster-project
\
--example quickstart_etl
The command
dagster project from-example
downloads one of the official Dagster examples to the current directory.



Documentation Source:
release-1-7-2.dagster.dagster-docs.io/_apidocs/cli.txt

Documentation Title:
Dagster Docs

Documentation Content:
list
List all sensors that correspond to a…
preview
Preview an existing sensor execution.
start
Start an existing sensor.
stop
Stop an existing sensor.
dagster project
¶
Commands for bootstrapping new Dagster projects and code locations.
dagster
project
[
OPTIONS
]
COMMAND
[
ARGS
]
...
Commands
from-example
Download one of the official Dagster examples to the current directory. This CLI enables you to quickly bootstrap your project with an officially maintained example.
list-examples
List the examples that available to bootstrap with.
scaffold
Create a folder structure with a single Dagster code location and other files such as pyproject.toml. This CLI enables you to quickly start building a new Dagster project with everything set up.
scaffold-code-location
Create a folder structure with a single Dagster code location, in the current directory. This CLI helps you to scaffold a new Dagster code location within a folder structure that includes multiple Dagster code locations.
scaffold-repository
(DEPRECATED; Use
dagster project scaffold-code-location
instead) Create a folder structure with a single Dagster repository, in the current directory. This CLI helps you to scaffold a new Dagster repository within a folder structure that includes multiple Dagster repositories
dagster-graphql
¶
Run a GraphQL query against the dagster interface to a specified repository or pipeline/job.
Can only use ONE of –workspace/-w, –python-file/-f, –module-name/-m, –grpc-port, –grpc-socket.
Examples:
dagster-graphql
dagster-graphql -y path/to/workspace.yaml
dagster-graphql -f path/to/file.py -a define_repo
dagster-graphql -m some_module -a define_repo
dagster-graphql -f path/to/file.py -a define_pipeline
dagster-graphql -m some_module -a define_pipeline
dagster-graphql
[
OPTIONS
]
Options
--version
¶
Show the version and exit.
-t
,
--text
<text>
¶
GraphQL document to execute passed as a string
-f
,
--file
<file>
¶
GraphQL document to execute passed as a file
-p
,
--predefined
<predefined>
¶
GraphQL document to execute, from a predefined set provided by dagster-graphql.



Documentation Source:
release-1-7-2.dagster.dagster-docs.io/getting-started/create-new-project.txt

Documentation Title:
Creating a new Dagster project | Dagster Docs

Documentation Content:
Check out the following resources to learn more about deployment options:
Dagster+
- Deploy using Dagster-managed infrastructure
Your own infrastructure
- Deploy to your infrastructure, such as Docker, Kubernetes, Amazon Web Services, etc.
Related
#
Intro to Dagster tutorial
Running Dagster locally
Structuring your Dagster project
Dagster project file reference
Dagster example project repository
On This Page
Creating a new Dagster project
Step 1: Bootstrap a new project
Using the default project skeleton
Using an official example
Step 2: Install project dependencies
Step 3: Start the Dagster UI
Step 4: Development
Adding new Python dependencies
Using environment variables and secrets
Adding and running unit tests
Next steps
Related
Edit Page on GitHub
Share Feedback
Star



Documentation Source:
release-1-7-2.dagster.dagster-docs.io/getting-started/create-new-project.txt

Documentation Title:
Creating a new Dagster project | Dagster Docs

Documentation Content:
This command enables you to quickly bootstrap your project with an officially maintained example.
For more info about the examples, visit the
Dagster GitHub repository
or use
dagster project list-examples
.
Step 2: Install project dependencies
#
The newly generated
my-dagster-project
directory is a fully functioning
Python package
and can be installed with
pip
.
To install it as a package and its Python dependencies, run:
pip
install
-e
".[dev]"
Using the
--editable
(
-e
) flag instructs
pip
to install your code location as a Python package in
"editable mode"
so that as you develop, local code changes are automatically applied.
Step 3: Start the Dagster UI
#
To start the
Dagster UI
, run:
dagster dev
Note
: This command also starts the
Dagster daemon
. Refer to the
Running Dagster locally guide
for more info.
Use your browser to open
http://localhost:3000
to view the project.
Step 4: Development
#
Adding new Python dependencies
Environment variables and secrets
Unit testing
Adding new Python dependencies
#
You can specify new Python dependencies in
setup.py
.
Using environment variables and secrets
#
Environment variables, which are key-value pairs configured outside your source code, allow you to dynamically modify application behavior depending on environment.
Using environment variables, you can define various configuration options for your Dagster application and securely set up secrets. For example, instead of hard-coding database credentials - which is bad practice and cumbersome for development - you can use environment variables to supply user details. This allows you to parameterize your pipeline without modifying code or insecurely storing sensitive data.
Refer to the
Using environment variables and secrets in Dagster code guide
for more info and examples.
Adding and running unit tests
#
Tests can be added in the
my_dagster_project_tests
directory and run using
pytest
:
pytest my_dagster_project_tests
Next steps
#
Once your project is ready to move to production, check out our recommendations for
transitioning data pipelines from development to production
.




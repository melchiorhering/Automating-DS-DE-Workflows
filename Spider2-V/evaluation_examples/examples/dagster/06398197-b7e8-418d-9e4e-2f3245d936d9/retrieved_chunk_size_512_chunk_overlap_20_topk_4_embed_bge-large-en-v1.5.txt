Documentation Source:
release-1-7-2.dagster.dagster-docs.io/guides/dagster-pipes/subprocess/modify-external-code.txt

Documentation Title:
Using Dagster Pipes, Part two: Modify external code | Dagster Docs

Documentation Content:
get
(
)
# send structured metadata back to Dagster
context
.
report_asset_materialization
(
metadata
=
{
"total_orders"
:
total_orders
}
)
if
__name__
==
"__main__"
:
# connect to Dagster Pipes
with
open_dagster_pipes
(
)
:
main
(
)
Then,
total_orders
will show up in the UI as structured metadata:
This metadata will also be displayed on the
Events
tab of the
Asset Details
page in the UI:
Report asset checks
#
Dagster allows you to define and execute data quality checks on assets. Refer to the
Asset Checks
documentation for more information.
If your asset has data quality checks defined, you can report to Dagster that an asset check has been performed via
PipesContext.report_asset_check
:
Report from the external code
Define the asset in the Dagster code
import
pandas
as
pd
from
dagster_pipes
import
PipesContext
,
open_dagster_pipes
def
main
(
)
:
orders_df
=
pd
.
DataFrame
(
{
"order_id"
:
[
1
,
2
]
,
"item_id"
:
[
432
,
878
]
}
)
total_orders
=
len
(
orders_df
)
# get the Dagster Pipes context
context
=
PipesContext
.
get
(
)
# send structured metadata back to Dagster
context
.
report_asset_materialization
(
metadata
=
{
"total_orders"
:
total_orders
}
)
# report data quality check result back to Dagster
context
.
report_asset_check
(
passed
=
orders_df
[
[
"item_id"
]
]
.
notnull
(
)
.
all
(
)
.



Documentation Source:
release-1-7-2.dagster.dagster-docs.io/guides/dagster-pipes/subprocess/modify-external-code.txt

Documentation Title:
Using Dagster Pipes, Part two: Modify external code | Dagster Docs

Documentation Content:
get
(
)
# send structured metadata back to Dagster
context
.
report_asset_materialization
(
metadata
=
{
"total_orders"
:
total_orders
}
)
# report data quality check result back to Dagster
context
.
report_asset_check
(
passed
=
orders_df
[
[
"item_id"
]
]
.
notnull
(
)
.
all
(
)
.
bool
(
)
,
check_name
=
"no_empty_order_check"
,
)
if
__name__
==
"__main__"
:
# connect to Dagster Pipes
with
open_dagster_pipes
(
)
:
main
(
)
import
shutil
from
dagster
import
(
AssetCheckSpec
,
AssetExecutionContext
,
Definitions
,
PipesSubprocessClient
,
asset
,
file_relative_path
,
)
@asset
(
check_specs
=
[
AssetCheckSpec
(
name
=
"no_empty_order_check"
,
asset
=
"subprocess_asset"
)
]
,
)
def
subprocess_asset
(
context
:
AssetExecutionContext
,
pipes_subprocess_client
:
PipesSubprocessClient
)
:
cmd
=
[
shutil
.
which
(
"python"
)
,
file_relative_path
(
__file__
,
"external_code.py"
)
,
]
return
pipes_subprocess_client
.
run
(
command
=
cmd
,
context
=
context
)
.
get_materialize_result
(
)
defs
=
Definitions
(
assets
=
[
subprocess_asset
]
,
resources
=
{
"pipes_subprocess_client"
:
PipesSubprocessClient
(
)
}
,
)
What's next?
#
In this tutorial, you learned how to get access to Dagster Pipes context, report log messages events from the external process, and send structured events back to Dagster.
What's next?



Documentation Source:
release-1-7-2.dagster.dagster-docs.io/guides/dagster-pipes/subprocess/modify-external-code.txt

Documentation Title:
Using Dagster Pipes, Part two: Modify external code | Dagster Docs

Documentation Content:
notnull
(
)
.
all
(
)
.
bool
(
)
,
check_name
=
"no_empty_order_check"
,
)
if
__name__
==
"__main__"
:
# connect to Dagster Pipes
with
open_dagster_pipes
(
)
:
main
(
)
import
shutil
from
dagster
import
(
AssetCheckSpec
,
AssetExecutionContext
,
Definitions
,
PipesSubprocessClient
,
asset
,
file_relative_path
,
)
@asset
(
check_specs
=
[
AssetCheckSpec
(
name
=
"no_empty_order_check"
,
asset
=
"subprocess_asset"
)
]
,
)
def
subprocess_asset
(
context
:
AssetExecutionContext
,
pipes_subprocess_client
:
PipesSubprocessClient
)
:
cmd
=
[
shutil
.
which
(
"python"
)
,
file_relative_path
(
__file__
,
"external_code.py"
)
,
]
return
pipes_subprocess_client
.
run
(
command
=
cmd
,
context
=
context
)
.
get_materialize_result
(
)
defs
=
Definitions
(
assets
=
[
subprocess_asset
]
,
resources
=
{
"pipes_subprocess_client"
:
PipesSubprocessClient
(
)
}
,
)
When Dagster executes the code, you’ll see an asset check event with the check result in the UI:
This check result will also be displayed on the
Checks
tab of the
Asset Details
page in the UI:
Finished code
#
At this point, your two files should look like the following:
External code in external_code.py
Dagster code in dagster_code.py
import
pandas
as
pd
from
dagster_pipes
import
PipesContext
,
open_dagster_pipes
def
main
(
)
:
orders_df
=
pd
.
DataFrame
(
{
"order_id"
:
[
1
,
2
]
,
"item_id"
:
[
432
,
878
]
}
)
total_orders
=
len
(
orders_df
)
# get the Dagster Pipes context
context
=
PipesContext
.



Documentation Source:
release-1-7-2.dagster.dagster-docs.io/guides/dagster-pipes/subprocess/reference.txt

Documentation Title:
Dagster Pipes subprocess reference | Dagster Docs

Documentation Content:
op_execution_context
)
.
get_asset_check_result
(
)
defs
=
Definitions
(
assets
=
[
my_asset
]
,
asset_checks
=
[
no_empty_order_check
]
,
resources
=
{
"pipes_subprocess_client"
:
PipesSubprocessClient
(
)
}
,
)
Working with multi-assets
#
Sometimes, you may invoke a single call to an API that results in multiple tables being updated, or you may have a single script that computes multiple assets. In these cases, you can use Dagster Pipes to report back on multiple assets at once.
External code in external_code.py
Dagster code in dagster_code.py
Note
: when working with multi-assets,
`
PipesContext.report_asset_materialization
may only be called once per unique asset key. If called more than once, an error similar to the following will surface:
Calling
{
method
}
with asset key
{
asset_key
}
is undefined. Asset has already been materialized, so no additional data can be reported
for
it
Instead, you’ll need to set the
asset_key
parameter for each instance of
PipesContext.report_asset_materialization
:
import
pandas
as
pd
from
dagster_pipes
import
PipesContext
,
open_dagster_pipes
def
main
(
)
:
orders_df
=
pd
.
DataFrame
(
{
"order_id"
:
[
1
,
2
,
3
]
,
"item_id"
:
[
432
,
878
,
102
]
,
"user_id"
:
[
"a"
,
"b"
,
"a"
]
}
)
total_orders
=
len
(
orders_df
)
total_users
=
orders_df
[
"user_id"
]
.
nunique
(
)
# get the Dagster Pipes context
context
=
PipesContext
.
get
(
)
# send structured metadata back to Dagster. asset_key is required when there are multiple assets
context
.
report_asset_materialization
(
asset_key
=
"orders"
,
metadata
=
{
"total_orders"
:
total_orders
}
)
context
.




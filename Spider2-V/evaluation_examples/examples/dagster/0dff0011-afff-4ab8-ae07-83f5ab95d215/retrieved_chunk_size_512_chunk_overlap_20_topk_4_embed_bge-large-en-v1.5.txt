Documentation Source:
release-1-7-2.dagster.dagster-docs.io/guides/running-dagster-locally.txt

Documentation Title:
Running Dagster locally | Dagster Docs

Documentation Content:
Running Dagster locally | Dagster Docs
Ask AI
Platform
Dagster+
New
Pricing
Blog
Community
Docs
Sign in
Join us on Slack
Star us
Try Dagster+
Platform
Dagster+
Pricing
Blog
Community
Docs
Contact Sales
Sign in
Try Dagster+
Search
the docs
Press
Ctrl
and
K
to search
Getting started
What's Dagster?
Quickstart
Installation
Creating a new project
Getting help
Tutorial
Concepts
Deployment
Integrations
Guides
API Reference
About
1.7.2
/ 0.23.2 (libs)
You are viewing an unreleased or outdated version of the documentation
View Latest Documentation
→
Running Dagster locally
#
In this guide, we'll walk you through how to run Dagster on your local machine using the
dagster dev
command.
Looking for installation help?
Refer to the
Dagster installation guide
.
Understanding the dagster dev command
#
The
dagster dev
command launches
the Dagster webserver/UI
and the
Dagster daemon
, allowing you to start a full deployment of Dagster from the command line.
This command should be run in a Python environment where the
dagster
and
dagster-webserver
packages are installed.
Once started, the process should be kept running.
Locating your code
#
Before you can start developing, you need to tell Dagster how to find the Python code containing your assets and jobs. There are a few ways to do this, which are outlined in the tabs below.
Note
: If using an example Dagster project, or if you used the
dagster
CLI to create a project
, you can run the
dagster dev
command in the same folder as the project to load the project code.
From a file
From a module
Without command line arguments
Dagster can load a file directly as a code location. In the following example, we used the
-f
argument to supply the name of the file:
dagster dev -f my_file.py
This command loads the definitions in
my_file.py
as a code location in the current Python environment.



Documentation Source:
release-1-7-2.dagster.dagster-docs.io/concepts/webserver/ui.txt

Documentation Title:
Dagster UI | Dagster

Documentation Content:
Dagster UI | Dagster
Ask AI
Platform
Dagster+
New
Pricing
Blog
Community
Docs
Sign in
Join us on Slack
Star us
Try Dagster+
Platform
Dagster+
Pricing
Blog
Community
Docs
Contact Sales
Sign in
Try Dagster+
Search
the docs
Press
Ctrl
and
K
to search
Getting started
What's Dagster?
Quickstart
Installation
Creating a new project
Getting help
Tutorial
Concepts
Deployment
Integrations
Guides
API Reference
About
1.7.2
/ 0.23.2 (libs)
You are viewing an unreleased or outdated version of the documentation
View Latest Documentation
→
Dagster UI
#
The Dagster UI is a web-based interface for viewing and interacting with Dagster objects.
You can inspect Dagster objects (ex: assets, jobs, schedules), launch runs, view launched runs, and view assets produced by those runs.
Launching the UI
#
The easiest way to launch the UI from the command line during local development is to run:
dagster dev
This command launches both the Dagster webserver (which serves the UI) and the
Dagster daemon
, allowing you to start a full local deployment of Dagster from the command line.
The command will print out the URL you can access the UI from in the browser, usually on port 3000.
When invoked, the UI will fetch definitions - such as assets, jobs, schedules, sensors, and resources - from a
Definitions
object in a Python module or package or the code locations configured in an open source deployment's
workspace files
. Refer to the
Code location documentation
for more info.
You can also launch the webserver by itself from the command line by running:
dagster-webserver
Note that several Dagster features, like schedules and sensors, require the Dagster daemon to be running in order to function.
Overview
#
Description
: This page, also known as the "factory floor", provides a high-level look at the activity in your Dagster deployment, across all code locations.



Documentation Source:
release-1-7-2.dagster.dagster-docs.io/_apidocs/cli.txt

Documentation Title:
Dagster Docs

Documentation Content:
For example, DAGSTER_WEBSERVER_PORT=3333 dagster-webserver
dagster-webserver
[
OPTIONS
]
Options
--use-ssl
¶
Use a secure channel when connecting to the gRPC server
--grpc-host
<grpc_host>
¶
Host to use to connect to gRPC server, defaults to localhost
--grpc-socket
<grpc_socket>
¶
Named socket to use to connect to gRPC server
--grpc-port
<grpc_port>
¶
Port to use to connect to gRPC server
-a
,
--attribute
<attribute>
¶
Attribute that is either a 1) repository or job or 2) a function that returns a repository or job
--package-name
<package_name>
¶
Specify Python package where repository or job function lives
-m
,
--module-name
<module_name>
¶
Specify module or modules (flag can be used multiple times) where dagster definitions reside as top-level symbols/variables and load each module as a code location in the current python environment.
-f
,
--python-file
<python_file>
¶
Specify python file or files (flag can be used multiple times) where dagster definitions reside as top-level symbols/variables and load each file as a code location in the current python environment.
-d
,
--working-directory
<working_directory>
¶
Specify working directory to use when loading the repository or job
-w
,
--workspace
<workspace>
¶
Path to workspace file. Argument can be provided multiple times.
--empty-workspace
¶
Allow an empty workspace
-h
,
--host
<host>
¶
Host to run server on
Default
:
127.0.0.1
-p
,
--port
<port>
¶
Port to run server on - defaults to 3000
-l
,
--path-prefix
<path_prefix>
¶
The path prefix where server will be hosted (eg: /dagster-webserver)
Default
:
--db-statement-timeout
<db_statement_timeout>
¶
The timeout in milliseconds to set on database statements sent to the DagsterInstance. Not respected in all configurations.



Documentation Source:
release-1-7-2.dagster.dagster-docs.io/community/contributing.txt

Documentation Title:
Contributing | Dagster

Documentation Content:
Docker
: Some tests require
Docker Desktop
to be able to run them locally.
Developing the Dagster webserver/UI
#
For development, run an instance of the webserver providing GraphQL service on a different port than the webapp, with any pipeline. For example:
cd
dagster/examples/docs_snippets/docs_snippets/intro_tutorial/basics/connecting_ops/
dagster-webserver -p
3333
-f complex_job.py
Keep this running. Then, in another terminal, run the local development (autoreloading, etc.) version of the webapp:
cd
dagster/js_modules/dagster-ui
make
dev_webapp
During development, you might find these commands useful. Run them from
dagster/js_modules/dagster-ui
:
yarn ts
: Typescript typechecking
yarn lint
: Linting with autofix
yarn jest
: An interactive Jest test runner that runs only affected tests by default
To run all of them together, run
yarn test
.
Developing Docs
#
The
docs style checklist
includes a set of style guidelines to adhere to when adding or modifying docs.
To run the Dagster documentation website locally, run the following commands:
cd
docs
make
next-watch-build
# Serves the docs website on http://localhost:3001
Troubleshooting tip: You may need to run
make next-dev-install
first to install dependencies. Also make sure that your Node version is >=12.13.0.
The API documentation is generated from ReStructured Text files (
.rst
), which extracts Python docstrings from the library files. The
.rst
files can be found in the
docs/sphinx/sections/api/apidocs
directory.
If you change any
.rst
files, be sure to run the following command in the
docs
directory:
make
apidoc-build
The majority of our code snippets are pulled from real Python files. This allows us to test our code snippets and ensure they remain up-to-date.
In
.mdx
files, you'll see a code snippet with
python file=/path/to/file.py startafter=start_marker endbefore=end_marker
at the beginning of the block.




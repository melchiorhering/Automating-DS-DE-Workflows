Documentation Source:
airbyte.com/docs.airbyte.com/connector-development/config-based/tutorial/connecting-to-the-API-source.txt

Documentation Title:
Step 3: Connecting to the API | Airbyte Documentation

Documentation Content:
We'll also be creating the following files:
source-exchange-rates-tutorial/secrets/config.json
: This is the configuration file we'll be using to test the connector. Its schema should match the schema defined in the spec file.
source-exchange-rates-tutorial/secrets/invalid_config.json
: This is an invalid configuration file we'll be using to test the connector. Its schema should match the schema defined in the spec file.
source_exchange_rates_tutorial/schemas/rates.json
: This is the
schema definition
for the stream we'll implement.
Updating the connector spec and config
​
Let's populate the specification (
spec
) and the configuration (
secrets/config.json
) so the connector can access the access key and base currency.
We'll add these properties to the
spec
block in the
source-exchange-rates-tutorial/source_exchange_rates_tutorial/manifest.yaml
spec
:
documentation_url
:
https
:
//docs.airbyte.com/integrations/sources/exchangeratesapi
connection_specification
:
$schema
:
http
:
//json
-
schema.org/draft
-
07/schema
#
title
:
exchangeratesapi.io Source Spec
type
:
object
required
:
-
access_key
-
base
additionalProperties
:
true
properties
:
access_key
:
type
:
string
description
:
>
-
Your API Access Key. See <a
href="https
:
//exchangeratesapi.io/documentation/"
>
here</a
>
. The key is
case sensitive.
airbyte_secret
:
true
base
:
type
:
string
description
:
>
-
ISO reference currency. See <a
href="https
:
//www.ecb.europa.eu/stats/policy_and_exchange_rates/euro_reference_exchange_rates/html/index.en.html"
>
here</a
>
.
examples
:
-
EUR
-
USD
We also need to fill in the connection config in the
secrets/config.json
Because of the sensitive nature of the access key, we recommend storing this config in the
secrets
directory because it is ignored by git.



Documentation Source:
airbyte.com/docs.airbyte.com/connector-development/config-based/tutorial/connecting-to-the-API-source.txt

Documentation Title:
Step 3: Connecting to the API | Airbyte Documentation

Documentation Content:
See <a
href="https
:
//www.ecb.europa.eu/stats/policy_and_exchange_rates/euro_reference_exchange_rates/html/index.en.html"
>
here</a
>
.
examples
:
-
EUR
-
USD
We can now run the
check
operation, which verifies the connector can connect to the API source.
poetry run source-exchange-rates-tutorial check --config secrets/config.json
which should now succeed with logs similar to:
{"type": "LOG", "log": {"level": "INFO", "message": "Check succeeded"}}
{"type": "CONNECTION_STATUS", "connectionStatus": {"status": "SUCCEEDED"}}
Next steps
​
Next, we'll
extract the records from the response
More readings
​
Config-based connectors overview
Authentication
Request options providers
Schema definition
Connector specification reference
Beginner's guide to catalog
Edit this page
Previous
Step 2: Install dependencies
Next
Step 4: Reading data
Updating the connector spec and config
Updating the connector definition
Next steps
More readings
Was this page helpful?
Yes
No



Documentation Source:
airbyte.com/docs.airbyte.com/using-airbyte/getting-started/set-up-a-connection.txt

Documentation Title:
Set up a Connection | Airbyte Documentation

Documentation Content:
Check the data from your first sync
​
Once the first sync has completed, you can verify the sync has completed by checking the data in your destination.
Cloud
Self Hosted
If you followed along and created your own connection using a
Google Sheets
destination, you will now see three tabs created in your Google Sheet,
products
,
users
, and
purchases
.
If you followed along and created your own connection using a
Local JSON
destination, you can use this command to check the file's contents to make sure the replication worked as intended (be sure to replace YOUR_PATH with the path you chose in your destination setup, and YOUR_STREAM_NAME with the name of an actual stream you replicated):
cat /tmp/airbyte_local/YOUR_PATH/_airbyte_raw_YOUR_STREAM_NAME.jsonl
You should see a list of JSON objects, each containing a unique
airbyte_ab_id
, an
emitted_at
timestamp, and
airbyte_data
containing the extracted record.
tip
If you are using Airbyte on Windows with WSL2 and Docker, refer to
this guide
to locate the replicated folder and file.
What's next?
​
Congratulations on successfully setting up your first connection using Airbyte! We hope that this will be just the first step on your journey with us. We support a large, ever-growing
catalog of sources and destinations
, and you can even
contribute your own
.
If you have any questions at all, please reach out to us on
Slack
. If you would like to see a missing feature or connector added, please create an issue on our
Github
. Our community's participation is invaluable in helping us grow and improve every day, and we always welcome your feedback.
Thank you, and we hope you enjoy using Airbyte!
Edit this page
Previous
Add a Destination
Next
Configuring Connections
Configure the connection
Connection Overview
Check the data from your first sync
What's next?
Was this page helpful?
Yes
No



Documentation Source:
airbyte.com/docs.airbyte.com/connector-development/config-based/tutorial/connecting-to-the-API-source.txt

Documentation Title:
Step 3: Connecting to the API | Airbyte Documentation

Documentation Content:
echo '{"access_key": "<your_access_key>", "base": "USD"}'  > secrets/config.json
Updating the connector definition
​
Next, we'll update the connector definition (
source-exchange-rates-tutorial/source_exchange_rates_tutorial/manifest.yaml
). It was generated by the code generation script.
More details on the connector definition file can be found in the
overview
and
connection definition
sections.
Let's fill this out these TODOs with the information found in the
Exchange Rates API docs
.
We'll first set the API's base url. According to the API documentation, the base url is
"https://api.apilayer.com"
.
definitions
:
<
...
>
requester
:
url_base
:
"https://api.apilayer.com"
Then, let's rename the stream from
customers
to
rates
, update the primary key to
date
, and set the path to "/exchangerates_data/latest" as per the API's documentation. This path is specific to the stream, so we'll set it within the
rates_stream
definition
rates_stream
:
$ref
:
"#/definitions/base_stream"
$parameters
:
name
:
"rates"
primary_key
:
"date"
path
:
"/exchangerates_data/latest"
We'll also update the reference in the
streams
block
streams
:
-
"#/definitions/rates_stream"
Update the references in the
check
block
check
:
stream_names
:
-
"rates"
Adding the reference in the
check
tells the
check
operation to use that stream to test the connection.
Next, we'll set up the authentication.
The Exchange Rates API requires an access key to be passed as header named "apikey".
This can be done using an
ApiKeyAuthenticator
, which we'll configure to point to the config's
access_key
field.
definitions
:
<
...
>
requester
:
url_base
:
"https://api.apilayer.com"
http_method
:
"GET"
authenticator
:
type
:
ApiKeyAuthenticator
header
:
"apikey"
api_token
:
"{{ config['access_key'] }}"
According to the ExchangeRatesApi documentation, we can specify the base currency of interest in a request parameter.




Documentation Source:
airbyte.com/tutorials/build-a-github-activity-dashboard-for-your-project.txt

Documentation Title:
Build a GitHub Activity Dashboard for your Project | Airbyte | Airbyte

Documentation Content:
Watch that
here
!
‍
‍
What we will need:
Git
Docker
Docker Compose
Airbyte
Postgres Database
GitHub access token
Metabase
Step 1: Replicating Data from GitHub to Postgres with Airbyte
Setting up Airbyte
You can skip this step if you already have Airbyte on your machine.
To set up Airbyte on your machine, make sure you have Docker and Docker compose set-up, as well as git. Then, open a terminal, and go to a location you want to download Airbyte in and run:
git clone https://github.com/airbytehq/airbyte.git
‍
You will need to go into the cloned airbyte repo by running cd airbyte and then you run:
docker-compose up
Or if you are on the newest version of the Docker CLI you can run:
docker compose up
The above command will create and start the Airbyte containers. After it's done, you can access Airbyte at
http://localhost:8000/
(you can go ahead and set up your preference, then leave the Airbyte web app open as we will come back to it shortly)
Setting up a Postgres database
This database will be the destination for the data coming in from GitHub. To set this up, we will be running a postgres container via docker like so:
‍
docker run --rm --name github-destination -e POSTGRES_PASSWORD=password -p 3003:5432 -d postgres
‍
If you are running the above command for the first time, it will download the Postgres image from Docker Hub registry and then run it as a container with the name of
github-destination
.
We are also setting the database password by passing an environment variable of
POSTGRES_PASSWORD
to a value of password.
We are also binding exposing the container’s 5432 port to our host machine on port 3003. Finally, we are running the container in the background with the -d flag.
Now that we have set up the destination database, let's head over to the Airbyte web app and create a connection from the Airbyte GitHub source to our Postgres database.



Documentation Source:
airbyte.com/tutorials/build-a-github-activity-dashboard-for-your-project.txt

Documentation Title:
Build a GitHub Activity Dashboard for your Project | Airbyte | Airbyte

Documentation Content:
Creating the Airbyte connection
Back in the Airbyte web app in your browser, click on the
new source
button in the top right corner of the app to go to the page to add a new Airbyte source.
Enter the name
github-source
as the source name and click the drop down and select Github connector as source type. After selecting the GitHub source type, you will be presented with two text boxes.The first is to enter a repository you want. In this box, type in
airbytehq/airbyte
, and then, in the second box, you will need to provide a GitHub access token which you can obtain from
here
.
Make sure you grant the token the repo and write:discussion permissions. After you've filled all fields, hit the set up source button.
If the setup was successful, you will be taken to the destination screen where you will add a new destination.
Click the
add destination
button, and, in the drop down that follows, click
add new destination
. Then, you will see a page to add the destination name. Type in the name we gave the Postgres container we created earlier (github-destination), and then choose Postgres as the destination type.
After, you will be presented with some text boxes to enter the database connection details. Enter the values for the Postgres container we created earlier:
host - localhost
post - 3003
schema - public (leave default)
database - postgres
Password - password
username - postgres
Then click on the basic normalization toggle button to check it on as we want Airbyte to normalize the data coming in from GitHub. Overall the UI should look like this:
Then click on the Set up destination button. If your credentials are all good for the database, the postgres destination would have been set, and now you will need to make the connection from the source (GitHub) to the destination (Postgres).
You should check the boxes that are checked in the screenshot below, and then choose how often Airbyte will attempt to replicate data to be every hour in the Sync frequency drop down. Then, click on the
Set up connection
button.
You will be taken to the source page, click on the source and you will see the status of your sync.



Documentation Source:
airbyte.com/tutorials/configure-airbyte-with-python-dagster.txt

Documentation Title:
Configure Airbyte Connections with Python (Dagster) | Airbyte

Documentation Content:
Note: I limited it to 10 items for this demo case.
def get_awesome_repo_list() -> str:

    url = "https://github.com/igorbarinov/awesome-data-engineering"
    html = requests.get(url)
    soup = BeautifulSoup(html.text, "html.parser")
    # parse all links into a list starting with github.com
    links = [
        link.get("href")
        for link in soup.find_all("a")
        if link.get("href").startswith("https://github.com")
    ]
    # remove links that start with url
    links = [
        link
        for link in links
        if not link.startswith(url) and not link.endswith("github.com")
    ]
    # remove last slash if there
    links = [link[:-1] if link.endswith("/") else link for link in links]
    # remove repos without organization
    links = [link for link in links if len(link.split("/")) == 5]
    # check if links are still existing in parallel to save time
    existings_links = asyncio.run(check_websites_exists(links))
    # remove `https://github.com/` from links
    links = [link.replace("https://github.com/", "") for link in existings_links]

    # due to timeout limits while airbyte is checking each repo, I limited it here to make this demo work for you
    links = links[0:10]

    # return links as a string with blank space as separator
    return " ".join(links)
Define Airbyte Postgres Destination
And the destination with:
postgres_destination = PostgresDestination(
    name="postgres",
    host="localhost",
    port=5432,
    database="postgres",
    schema="public",
    username="postgres",
    password=POSTGRES_PASSWORD,
    ssl_mode=PostgresDestination.Disable(),
)
Define Airbyte Connection
When we have both source and destination, we can merge them in an Airbyte connection where we specify the tables we sync with stream_config; in our demo case, we only need the table <span class="text-style-code">stargazers</span>. Other configurations can be set, such as
Airbyte Sync Modes
and
Normalization
.



Documentation Source:
airbyte.com/docs.airbyte.com/integrations/sources/github.txt

Documentation Title:
GitHub | Airbyte Documentation

Documentation Content:
Prerequisites
​
List of GitHub Repositories (and access for them in case they are private)
For Airbyte Cloud:
OAuth
Personal Access Token (see
Permissions and scopes
)
For Airbyte Open Source:
Personal Access Token (see
Permissions and scopes
)
Setup guide
​
Step 1: Set up GitHub
​
Create a
GitHub Account
.
Airbyte Open Source additional setup steps
Log into
GitHub
and then generate a
personal access token
. To load balance your API quota consumption across multiple API tokens, input multiple tokens separated with
,
.
Step 2: Set up the GitHub connector in Airbyte
​
For Airbyte Cloud:
Log into your Airbyte Cloud
account.
In the left navigation bar, click
Sources
.
On the source selection page, select
GitHub
from the list of Sources.
Add a name for your GitHub connector.
To authenticate:
For Airbyte Cloud:
Authenticate your GitHub account
to authorize your GitHub account. Airbyte will authenticate the GitHub account you are already logged in to. Please make sure you are logged into the right account.
For Airbyte Open Source:
Authenticate with
Personal Access Token
. To generate a personal access token, log into
GitHub
and then generate a
personal access token
. Enter your GitHub personal access token. To load balance your API quota consumption across multiple API tokens, input multiple tokens separated with
,
.
GitHub Repositories
- Enter a list of GitHub organizations/repositories, e.g.
airbytehq/airbyte
for single repository,
airbytehq/airbyte airbytehq/another-repo
for multiple repositories. If you want to specify the organization to receive data from all its repositories, then you should specify it according to the following example:
airbytehq/*
.
caution
Repositories with the wrong name or repositories that do not exist or have the wrong name format will be skipped with
WARN
message in the logs.
Start date (Optional)
- The date from which you'd like to replicate data for streams. For streams which support this configuration, only data generated on or after the start date will be replicated.




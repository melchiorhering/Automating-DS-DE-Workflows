Documentation Source:
docs.getdbt.com/guides/manual-install.txt

Documentation Title:
Quickstart for dbt Core from a manual install | dbt Developer Hub

Documentation Content:
jaffle_shop
.
orders
Edit the SQL in your
models/customers.sql
file as follows:
models/customers.sql
with
customers
as
(
select
*
from
{{ ref
(
'stg_customers'
)
}}
)
,
orders
as
(
select
*
from
{{ ref
(
'stg_orders'
)
}}
)
,
customer_orders
as
(
select
customer_id
,
min
(
order_date
)
as
first_order_date
,
max
(
order_date
)
as
most_recent_order_date
,
count
(
order_id
)
as
number_of_orders
from
orders
group
by
1
)
,
final
as
(
select
customers
.
customer_id
,
customers
.
first_name
,
customers
.
last_name
,
customer_orders
.
first_order_date
,
customer_orders
.
most_recent_order_date
,
coalesce
(
customer_orders
.
number_of_orders
,
0
)
as
number_of_orders
from
customers
left
join
customer_orders
using
(
customer_id
)
)
select
*
from
final
Execute
dbt run
.
This time, when you performed a
dbt run
, separate views/tables were created for
stg_customers
,
stg_orders
and
customers
. dbt inferred the order to run these models. Because
customers
depends on
stg_customers
and
stg_orders
, dbt builds
customers
last. You do not need to explicitly define these dependencies.
FAQs
​
As I create more models, how should I keep my project organized? What should I name my models?
Next steps
​
Before moving on from building your first models, make a change and see how it affects your results:
Write some bad SQL to cause an error — can you debug the error?
Run only a single model at a time. For more information, see
Syntax overview
.
Group your models with a
stg_
prefix into a
staging
subdirectory. For example,
models/staging/stg_customers.sql
.
Configure your
staging
models to be views.
Run only the
staging
models.



Documentation Source:
docs.getdbt.com/guides/manual-install121c.txt

Documentation Title:
Quickstart for dbt Core from a manual install | dbt Developer Hub

Documentation Content:
jaffle_shop
.
orders
Edit the SQL in your
models/customers.sql
file as follows:
models/customers.sql
with
customers
as
(
select
*
from
{{ ref
(
'stg_customers'
)
}}
)
,
orders
as
(
select
*
from
{{ ref
(
'stg_orders'
)
}}
)
,
customer_orders
as
(
select
customer_id
,
min
(
order_date
)
as
first_order_date
,
max
(
order_date
)
as
most_recent_order_date
,
count
(
order_id
)
as
number_of_orders
from
orders
group
by
1
)
,
final
as
(
select
customers
.
customer_id
,
customers
.
first_name
,
customers
.
last_name
,
customer_orders
.
first_order_date
,
customer_orders
.
most_recent_order_date
,
coalesce
(
customer_orders
.
number_of_orders
,
0
)
as
number_of_orders
from
customers
left
join
customer_orders
using
(
customer_id
)
)
select
*
from
final
Execute
dbt run
.
This time, when you performed a
dbt run
, separate views/tables were created for
stg_customers
,
stg_orders
and
customers
. dbt inferred the order to run these models. Because
customers
depends on
stg_customers
and
stg_orders
, dbt builds
customers
last. You do not need to explicitly define these dependencies.
FAQs
​
As I create more models, how should I keep my project organized? What should I name my models?
Next steps
​
Before moving on from building your first models, make a change and see how it affects your results:
Write some bad SQL to cause an error — can you debug the error?
Run only a single model at a time. For more information, see
Syntax overview
.
Group your models with a
stg_
prefix into a
staging
subdirectory. For example,
models/staging/stg_customers.sql
.
Configure your
staging
models to be views.
Run only the
staging
models.



Documentation Source:
docs.getdbt.com/guides/manual-install0c17.txt

Documentation Title:
Quickstart for dbt Core from a manual install | dbt Developer Hub

Documentation Content:
jaffle_shop
.
orders
Edit the SQL in your
models/customers.sql
file as follows:
models/customers.sql
with
customers
as
(
select
*
from
{{ ref
(
'stg_customers'
)
}}
)
,
orders
as
(
select
*
from
{{ ref
(
'stg_orders'
)
}}
)
,
customer_orders
as
(
select
customer_id
,
min
(
order_date
)
as
first_order_date
,
max
(
order_date
)
as
most_recent_order_date
,
count
(
order_id
)
as
number_of_orders
from
orders
group
by
1
)
,
final
as
(
select
customers
.
customer_id
,
customers
.
first_name
,
customers
.
last_name
,
customer_orders
.
first_order_date
,
customer_orders
.
most_recent_order_date
,
coalesce
(
customer_orders
.
number_of_orders
,
0
)
as
number_of_orders
from
customers
left
join
customer_orders
using
(
customer_id
)
)
select
*
from
final
Execute
dbt run
.
This time, when you performed a
dbt run
, separate views/tables were created for
stg_customers
,
stg_orders
and
customers
. dbt inferred the order to run these models. Because
customers
depends on
stg_customers
and
stg_orders
, dbt builds
customers
last. You do not need to explicitly define these dependencies.
FAQs
​
As I create more models, how should I keep my project organized? What should I name my models?
Next steps
​
Before moving on from building your first models, make a change and see how it affects your results:
Write some bad SQL to cause an error — can you debug the error?
Run only a single model at a time. For more information, see
Syntax overview
.
Group your models with a
stg_
prefix into a
staging
subdirectory. For example,
models/staging/stg_customers.sql
.
Configure your
staging
models to be views.
Run only the
staging
models.



Documentation Source:
docs.getdbt.com/guides/manual-install8722.txt

Documentation Title:
Quickstart for dbt Core from a manual install | dbt Developer Hub

Documentation Content:
jaffle_shop
.
orders
Edit the SQL in your
models/customers.sql
file as follows:
models/customers.sql
with
customers
as
(
select
*
from
{{ ref
(
'stg_customers'
)
}}
)
,
orders
as
(
select
*
from
{{ ref
(
'stg_orders'
)
}}
)
,
customer_orders
as
(
select
customer_id
,
min
(
order_date
)
as
first_order_date
,
max
(
order_date
)
as
most_recent_order_date
,
count
(
order_id
)
as
number_of_orders
from
orders
group
by
1
)
,
final
as
(
select
customers
.
customer_id
,
customers
.
first_name
,
customers
.
last_name
,
customer_orders
.
first_order_date
,
customer_orders
.
most_recent_order_date
,
coalesce
(
customer_orders
.
number_of_orders
,
0
)
as
number_of_orders
from
customers
left
join
customer_orders
using
(
customer_id
)
)
select
*
from
final
Execute
dbt run
.
This time, when you performed a
dbt run
, separate views/tables were created for
stg_customers
,
stg_orders
and
customers
. dbt inferred the order to run these models. Because
customers
depends on
stg_customers
and
stg_orders
, dbt builds
customers
last. You do not need to explicitly define these dependencies.
FAQs
​
As I create more models, how should I keep my project organized? What should I name my models?
Next steps
​
Before moving on from building your first models, make a change and see how it affects your results:
Write some bad SQL to cause an error — can you debug the error?
Run only a single model at a time. For more information, see
Syntax overview
.
Group your models with a
stg_
prefix into a
staging
subdirectory. For example,
models/staging/stg_customers.sql
.
Configure your
staging
models to be views.
Run only the
staging
models.




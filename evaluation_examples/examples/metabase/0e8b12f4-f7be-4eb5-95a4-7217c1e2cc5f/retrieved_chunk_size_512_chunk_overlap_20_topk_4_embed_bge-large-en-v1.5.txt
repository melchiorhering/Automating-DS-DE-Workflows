Documentation Source:
www.metabase.com/docs/v0.49/questions/query-builder/introduction.txt

Documentation Title:
Asking questions

Documentation Content:
Unlike other steps, the row limit step can only be added at the end of your question.
Viewing the SQL that powers your question
Under the hood, all Metabase questions are SQL (gasp!). If you’re curious to see the SQL that will get run when you ask your question, you can click the little console icon in the top-right of the notebook editor. In the modal that opens up, you’ll also be given the option to start a new query in the SQL editor using this generated SQL as a starting point (assuming you have
SQL permissions
to that database). It’s a nice little shortcut to have Metabase write some boilerplate SQL for you, but then allows you to tweak and customize the query.
Play around with saved questions
Each time you start modifying a saved question, Metabase will create a new question for you. The query builder will display the name of your starting question under
Data
.
Feel free to play around with any saved question, as you won’t have any effect on the existing question. When you hit
Save
on the question, you can choose either to save as a new question (the default), or you can overwrite the existing question you started from.
If you find yourself using the same saved question as a starting point for multiple questions, you may want to turn it into a
model
to let others know it’s a good starting place.
Question version history
For questions,
dashboards
, and
models
, Metabase keeps a version history for the previous fifteen versions of that item.
See
History
.
Further reading
Visualize results
.
Sharing answers
.
Asking questions
Read docs for other
versions of Metabase
.
Did this article help you?
Yes
No
Send
Thanks for your feedback!
Want to improve these docs?
Propose a change.
Subscribe to our newsletter
Stay in touch with updates and news from Metabase. No spam, ever.



Documentation Source:
www.metabase.com/docs/v0.49/questions/query-builder/introduction.txt

Documentation Title:
Asking questions

Documentation Content:
when
Analytics dashboards
Share insights with anyone, anywhere
SQL editor
For advanced data users
Sandboxing
Set boundaries around your data
Models
A starting point for questions
Permissions
Keep your data secure and private
CSV upload
Go beyond VLOOKUP
Documentation
Resources
Learn
Blog
Events
Customers
Discussion
Partners
Community Stories
Startup Guide to Financial Modeling
New
Community Data Stack Report
New
Pricing
Log in
v0.49
Questions
Asking questions
Metabase’s two core concepts are questions and their corresponding answers. To ask a question in Metabase, click the
+ New
button in the upper right of the main navigation bar, and select either:
Question
SQL query
This page covers how to ask a question using Metabase’s graphical query builder, the “Question” option.
Creating a new question with the query builder
From the
+ New
dropdown, select
Question
, then pick your starting data:
You can start a question from:
A model
. A
model
is a special kind of saved question meant to be used as a good starting point for questions. Sometimes these are called derived tables, as they usually pull together data from multiple raw tables.
Raw data
. You’ll need to specify the database and the table in that database as the starting point for your question.
A
saved question
. You can use the results of any question as the starting point for a new question.
Note that there are some kinds of saved questions that can’t be used as source data:
Druid questions
Mongo questions
Questions that use
Cumulative Sum
or
Cumulative Count
aggregations
Questions that have columns that are named the same or similar thing, like
Count
and
Count 2
The query builder
Once you select your data, Metabase will take you to the query builder. Say you selected
Raw data
>
Sample database
>
Orders
, then you’ll see something like this:
This is the query builder’s notebook editor. It has three default steps.



Documentation Source:
www.metabase.com/learn/getting-started/tour-of-metabase.txt

Documentation Title:
A tour of Metabase

Documentation Content:
Plus, people who don’t know SQL can duplicate your question and use it as a starting point for another question.
Query builder questions automatically get a drill-through menu applied to their visualizations, allowing people to click on a table or chart to
drill through the data
.
Questions asked with the query builder can start with a
model
, a raw table, or with the results of a saved question, and you can convert them to native SQL at any time.
Native queries
Use the
native query editor
to compose questions in the database’s native query languages (typically SQL for relational databases, but also other query languages for data sources like MongoDB). For questions written in SQL, you can use variables in your code to create
SQL templates
, including
field filter
variables that can create smart dropdown filters.
Like query builder questions, you can use the results of models or
saved questions
as starting points for new questions, just as you would a table or view. For example, to reference question 123 like so:
WITH
gizmo_orders
AS
#
{
123
}
Create models to use as starting data for new questions
Models
are built with questions from either the query builder or the SQL editor. You can use them to pull together data from multiple tables, with custom, calculated columns, and column descriptions and other metadata, to create great starting data for people to ask new questions. For example, you could build a model for “Active users”, or “Priority orders”, or however you want to model your business.
If you find that you’re using the same saved question over and over as your starting data for new questions, you may want to convert that saved question to a model, which will let you add metadata like column descriptions and column types. You can also refer to models in SQL queries, just like we did above with saved questions.
Upload spreadsheets
You can
upload CSVs
to query and visualize in Metabase. This feature is handy for quick ad hoc analysis of spreadsheet data.
Visualize results
When you ask a question, Metabase will guess at the most appropriate visualization type for the results, but you can select from sixteen different visualization options.
Additionally, each visualization type has their own set of options to customize.



Documentation Source:
www.metabase.com/learn/data-modeling/models.txt

Documentation Title:
Models in Metabase

Documentation Content:
How many orders they’ve placed.
The average total per order.
In a real-life model, you’d probably have a lot more questions you’d want to answer, which would require many more columns to answer (like how old a customer is, how long they spent on the site, items added and removed from cart, or all the other data points you think your teams will want to ask questions about). The idea with models is to get all the boilerplate code that brings all this data together out of the way so people can just start playing around with the data they’re actually interested in.
So here’s our question, built using the query builder:
For our data, we selected the
Orders
table, joined it to the
People
table, summarized the sum of the order totals, counted the rows, and calculated the average order total using a custom expression:
= Sum([Total]) / Count
. Next we grouped by:
User_ID
,
People.Created_At
,
State
,
Zip
, and
Source
.
We save that question, click on the question title to bring up the question sidebar (you may have to refresh your browser), and click on the model icon (the three building blocks stacked in a triangle) to turn the question into a model.
Adding metadata to a model is key
This is the model’s superpower, and it’s especially useful for models built with SQL queries, as Metabase doesn’t know the column types returned by a SQL query.
Clicking on the model’s name will bring up the model sidebar, which gives us the option to
Customize metadata
. Here we can give columns friendlier names, add descriptions to the columns (which will show up on hover), and tell Metabase what type of data the column contains.
If we were instead to use a
SQL query
to create that same customer model (see
A model example
above), Metabase wouldn’t automatically be able to do its usual drill-though magic.
But we can restore the drill-through menu and all the other Metabase magic if we add some metadata to the model’s columns (that is, to the fields returned by the model’s definition, its query).
For example, if this was the query defining our model:
SELECT
orders
.
user_id
AS
id
,
people
.




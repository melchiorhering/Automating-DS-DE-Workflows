Documentation Source:
release-1-7-2.dagster.dagster-docs.io/integrations/dbt/using-dbt-with-dagster/downstream-assets.txt

Documentation Title:
Using Dagster with dbt, part 4: Add a downstream asset

Documentation Content:
The line
deps=get_asset_key_for_model([jaffle_shop_dbt_assets], "customers")
tells Dagster that this asset is downstream of the
customers
dbt model. This dependency will be displayed as such in Dagster's UI. If you launch a run to materialize both of them, Dagster won't run
order_count_chart
until
customers
completes.
Add the
order_count_chart
to the
Definitions
:
import
os
from
dagster
import
Definitions
from
dagster_dbt
import
DbtCliResource
from
.
assets
import
jaffle_shop_dbt_assets
,
order_count_chart
,
raw_customers
from
.
constants
import
dbt_project_dir
from
.
schedules
import
schedules

defs
=
Definitions
(
assets
=
[
raw_customers
,
jaffle_shop_dbt_assets
,
order_count_chart
]
,
schedules
=
schedules
,
resources
=
{
"dbt"
:
DbtCliResource
(
project_dir
=
os
.
fspath
(
dbt_project_dir
)
)
,
}
,
)
Step 3: Materialize the order_count_chart asset
#
If the Dagster UI is still running from the previous section, click the "Reload Definitions" button in the upper right corner. If you shut it down, then you can launch it again with the same command from the previous section:
DAGSTER_DBT_PARSE_PROJECT_ON_LOAD
=
1
dagster dev
The UI will look like this:
A new asset named
order_count_chart
is at the bottom, downstream of the
customers
asset. Click on
order_count_chart
and click
Materialize selected
.
That's it! When the run successfully completes, the following chart will automatically open in your browser:
What's next?
#
That's the end of this tutorial - congratulations! By now, you should have a working dbt and Dagster integration and a handful of materialized Dagster assets.
What's next?



Documentation Source:
release-1-7-2.dagster.dagster-docs.io/integrations/dbt/using-dbt-with-dagster/upstream-assets.txt

Documentation Title:
Using Dagster with dbt, part 3: Define assets upstream of your dbt models

Documentation Content:
Finally, let's update the
assets
argument of our
Definitions
object, in
definitions.py
, to include the new asset we just defined:
import
os
from
dagster
import
Definitions
from
dagster_dbt
import
DbtCliResource
from
.
assets
import
jaffle_shop_dbt_assets
,
raw_customers
from
.
constants
import
dbt_project_dir
from
.
schedules
import
schedules

defs
=
Definitions
(
assets
=
[
raw_customers
,
jaffle_shop_dbt_assets
]
,
schedules
=
schedules
,
resources
=
{
"dbt"
:
DbtCliResource
(
project_dir
=
os
.
fspath
(
dbt_project_dir
)
)
,
}
,
)
Step 3: In the dbt project, replace a seed with a source
#
Because we're replacing it with a Dagster asset, we no longer need the dbt seed for
raw_customers
, so we can delete it:
cd
..
rm
seeds/raw_customers.csv
Instead, we want to tell dbt that
raw_customers
is a table that is defined outside of the dbt project. We can do that by defining it inside a
dbt source
.
Create a file called
sources.yml
inside the
models/
directory, and put this inside it:
version
:
2
sources
:
-
name
:
jaffle_shop
tables
:
-
name
:
raw_customers
meta
:
dagster
:
asset_key
:
[
"raw_customers"
]
# This metadata specifies the corresponding Dagster asset for this dbt source.
This is a standard dbt source definition, with one addition: it includes metadata, under the
meta
property, that specifies the Dagster asset that it corresponds to. When Dagster reads the contents of the dbt project, it reads this metadata and infers the correspondence.



Documentation Source:
release-1-7-2.dagster.dagster-docs.io/integrations/dbt/using-dbt-with-dagster/upstream-assets.txt

Documentation Title:
Using Dagster with dbt, part 3: Define assets upstream of your dbt models

Documentation Content:
connect
(
os
.
fspath
(
duckdb_database_path
)
)
connection
.
execute
(
"create schema if not exists jaffle_shop"
)
connection
.
execute
(
"create or replace table jaffle_shop.raw_customers as select * from data"
)
# Log some metadata about the table we just wrote. It will show up in the UI.
context
.
add_output_metadata
(
{
"num_rows"
:
data
.
shape
[
0
]
}
)
@dbt_assets
(
manifest
=
dbt_manifest_path
)
def
jaffle_shop_dbt_assets
(
context
:
AssetExecutionContext
,
dbt
:
DbtCliResource
)
:
yield
from
dbt
.
cli
(
[
"build"
]
,
context
=
context
)
.
stream
(
)
Let's review the changes we made:
At the top, we added imports for
pandas
and
duckdb
, which we use for fetching data into a
DataFrame
and writing it to DuckDB.
We added a
duckdb_database_path
variable, which holds the location of our DuckDB database. Remember that DuckDB databases are just regular files on the local filesystem. The path is the same path that we used when we configured our
profiles.yml
file. This variable is used in the implementations of the
raw_customers
asset.
We added a definition for the
raw_customers
table by writing a function named
raw_customers
and decorating it with the
@asset
decorator. We labeled it with
compute_kind="python"
to indicate in the Dagster UI that this is an asset defined in Python. The implementation inside the function fetches data from the internet and writes it to a table in our DuckDB database. Similar to how running a dbt model executes a select statement, materializing this asset will execute this Python code.



Documentation Source:
release-1-7-2.dagster.dagster-docs.io/integrations/dbt/using-dbt-with-dagster/upstream-assets.txt

Documentation Title:
Using Dagster with dbt, part 3: Define assets upstream of your dbt models

Documentation Content:
For any dbt model that depends on this dbt source, Dagster then knows that the Dagster asset corresponding to the dbt model should depend on the Dagster asset corresponding to the source.
Then, update the model that depends on the
raw_customers
seed to instead depend on the source. Replace the contents of
model/staging/stg_customers.sql
with this:
with
source
as
(
{
#-
Use
source instead
of
seed:
#}
select
*
from
{{ source
(
'jaffle_shop'
,
'raw_customers'
)
}}
)
,
renamed
as
(
select
id
as
customer_id
,
first_name
,
last_name
from
source
)
select
*
from
renamed
Step 4: Materialize the assets using the Dagster UI
#
If the Dagster UI is still running from the previous section, click the "Reload Definitions" button in the upper right corner. If you shut it down, then you can launch it again with the same command from the previous section:
DAGSTER_DBT_PARSE_PROJECT_ON_LOAD
=
1
dagster dev
Our
raw_customers
model is now defined as a Python asset. We can also see that assets downstream of this new Python asset, such as
stg_customers
and
customers
, are now marked stale because the code definition of
raw_customers
has changed.
Click the
Materialize all
button. This will launch a run with two steps:
Run the
raw_customers
Python function to fetch data and write the
raw_customers
table to DuckDB.
Run all the dbt models using
dbt build
, like in the last section.
If you click to view the run, you can see a graphical representation of these steps, along with logs.
What's next?
#
At this point, you've built and materialized an upstream Dagster asset, providing source data to your dbt models. In the last section of the tutorial, we'll show you how to add a
downstream asset to the pipeline
.




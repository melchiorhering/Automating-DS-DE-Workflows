Documentation Source:
release-1-7-2.dagster.dagster-docs.io/integrations/duckdb/using-duckdb-with-dagster.txt

Documentation Title:
Using Dagster with DuckDB | Dagster Docs

Documentation Content:
You can accomplish this by creating
source assets
for these tables.
from
dagster
import
SourceAsset

iris_harvest_data
=
SourceAsset
(
key
=
"iris_harvest_data"
)
In this example, you're creating a
SourceAsset
for a pre-existing table called
iris_harvest_data
.
Now you can run
dagster dev
and materialize the
iris_dataset
asset from the Dagster UI.
Step 3: Define downstream assets
#
Once you have created an asset that represents a table in DuckDB, you will likely want to create additional assets that work with the data.
from
dagster
import
asset
# this example uses the iris_dataset asset from Step 1
@asset
(
deps
=
[
iris_dataset
]
)
def
iris_setosa
(
duckdb
:
DuckDBResource
)
-
>
None
:
with
duckdb
.
get_connection
(
)
as
conn
:
conn
.
execute
(
"CREATE TABLE iris.iris_setosa AS SELECT * FROM iris.iris_dataset WHERE"
" species = 'Iris-setosa'"
)
In this asset, you're creating second table that only contains the data for the
Iris Setosa
species. This asset has a dependency on the
iris_dataset
asset. To define this dependency, you provide the
iris_dataset
asset as the
deps
parameter to the
iris_setosa
asset. You can then run the SQL query to create the table of
Iris Setosa
data.
Completed code example
#
When finished, your code should look like the following:
import
pandas
as
pd
from
dagster_duckdb
import
DuckDBResource
from
dagster
import
Definitions
,
SourceAsset
,
asset

iris_harvest_data
=
SourceAsset
(
key
=
"iris_harvest_data"
)
@asset
def
iris_dataset
(
duckdb
:
DuckDBResource
)
-
>
None
:
iris_df
=
pd
.



Documentation Source:
release-1-7-2.dagster.dagster-docs.io/integrations/duckdb/using-duckdb-with-dagster.txt

Documentation Title:
Using Dagster with DuckDB | Dagster Docs

Documentation Content:
DataFrame
)
-
>
pd
.
DataFrame
:
return
iris_dataset
[
iris_dataset
[
"species"
]
==
"Iris-setosa"
]
In this asset, you're providing the
iris_dataset
asset as a dependency to
iris_setosa
. By supplying
iris_dataset
as a parameter to
iris_setosa
, Dagster knows to use the
DuckDBPandasIOManager
to load this asset into memory as a Pandas DataFrame and pass it as an argument to
iris_setosa
. Next, a DataFrame that only contains the data for the
Iris Setosa
species is created and returned. Then the
DuckDBPandasIOManager
will store the DataFrame as the
IRIS.IRIS_SETOSA
table in DuckDB.
Completed code example
#
When finished, your code should look like the following:
import
pandas
as
pd
from
dagster_duckdb_pandas
import
DuckDBPandasIOManager
from
dagster
import
Definitions
,
SourceAsset
,
asset

iris_harvest_data
=
SourceAsset
(
key
=
"iris_harvest_data"
)
@asset
def
iris_dataset
(
)
-
>
pd
.
DataFrame
:
return
pd
.
read_csv
(
"https://docs.dagster.io/assets/iris.csv"
,
names
=
[
"sepal_length_cm"
,
"sepal_width_cm"
,
"petal_length_cm"
,
"petal_width_cm"
,
"species"
,
]
,
)
@asset
def
iris_setosa
(
iris_dataset
:
pd
.
DataFrame
)
-
>
pd
.



Documentation Source:
release-1-7-2.dagster.dagster-docs.io/integrations/duckdb/reference.txt

Documentation Title:
dagster-duckdb integration reference

Documentation Content:
DataFrame
:
partition
=
context
.
partition_key
.
keys_by_dimension
    species
=
partition
[
"species"
]
date
=
partition
[
"date"
]
# get_iris_data_for_date fetches all of the iris data for a given date,
# the returned dataframe contains a column named 'time' with that stores
# the time of the row as an integer of seconds since epoch
full_df
=
get_iris_data_for_date
(
date
)
return
full_df
[
full_df
[
"species"
]
==
species
]
@asset
def
iris_cleaned
(
iris_dataset_partitioned
:
pd
.
DataFrame
)
:
return
iris_dataset_partitioned
.
dropna
(
)
.
drop_duplicates
(
)
Dagster uses the
partition_expr
metadata to craft the
SELECT
statement when loading the correct partition in a downstream asset. For multi-partitions, Dagster concatenates the
WHERE
statements described in the above sections to craft the correct
SELECT
statement.
A partition must be selected when materializing the above assets, as described in the
Materializing partitioned assets
documentation. For example, when materializing the
2023-01-02|Iris-setosa
partition of the above assets, the following query will be used:
SELECT
*
WHERE
SPECIES
in
(
'Iris-setosa'
)
AND
TO_TIMESTAMP
(
TIME
)
>=
'2023-01-02 00:00:00'
AND
TO_TIMESTAMP
(
TIME
)
<
'2023-01-03 00:00:00'
In this example, the data in the
TIME
column are integers, so the
partition_expr
metadata includes a SQL statement to convert integers to timestamps. A full list of DuckDB functions can be found
here
.
Storing tables in multiple schemas
#
You may want to have different assets stored in different DuckDB schemas. The DuckDB I/O manager allows you to specify the schema in several ways.



Documentation Source:
release-1-7-2.dagster.dagster-docs.io/integrations/duckdb/using-duckdb-with-dagster.txt

Documentation Title:
Using Dagster with DuckDB | Dagster Docs

Documentation Content:
When Dagster materializes the
iris_dataset
asset using the configuration from
Step 1: Configure the DuckDB I/O manager
, the DuckDB I/O manager will create the table
IRIS.IRIS_DATASET
if it does not exist and replace the contents of the table with the value returned from the
iris_dataset
asset.
Make an existing table available in Dagster
#
If you already have existing tables in DuckDB and other assets defined in Dagster depend on those tables, you may want Dagster to be aware of those upstream dependencies. Making Dagster aware of these tables will allow you to track the full data lineage in Dagster. You can accomplish this by creating
source assets
for these tables.
from
dagster
import
SourceAsset

iris_harvest_data
=
SourceAsset
(
key
=
"iris_harvest_data"
)
In this example, you're creating a
SourceAsset
for a pre-existing table containing iris harvests data. To make the data available to other Dagster assets, you need to tell the DuckDB I/O manager how to find the data.
Because you already supplied the database and schema in the I/O manager configuration in
Step 1: Configure the DuckDB I/O manager
, you only need to provide the table name. This is done with the
key
parameter in
SourceAsset
. When the I/O manager needs to load the
iris_harvest_data
in a downstream asset, it will select the data in the
IRIS.IRIS_HARVEST_DATA
table as a Pandas DataFrame and provide it to the downstream asset.
Step 3: Load DuckDB tables in downstream assets
#
Once you have created an asset that represents a table in DuckDB, you will likely want to create additional assets that work with the data. Dagster and the DuckDB I/O manager allow you to load the data stored in DuckDB tables into downstream assets.
import
pandas
as
pd
from
dagster
import
asset
# this example uses the iris_dataset asset from Step 2
@asset
def
iris_setosa
(
iris_dataset
:
pd
.




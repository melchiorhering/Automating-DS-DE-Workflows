Documentation Source:
release-1-7-2.dagster.dagster-docs.io/guides/dagster/testing-assets.txt

Documentation Title:
Testing Assets | Dagster Docs

Documentation Content:
I can't wait to use it!"
}
,
{
"title"
:
"Pied Piper launches new product"
}
,
]
)
results
=
topstories_word_cloud
(
df
)
assert
results
is
not
None
# It returned something
Testing a graph of assets
#
We'll also write a test for all the assets together. To do that, we can put them in a list and then pass it to the
materialize
function. That returns an
ExecuteInProcessResult
object, whose methods let us investigate, in detail, the success or failure of execution, the values produced by the computation, and other events associated with execution.
Update the
test_assets.py
file to include the following code:
from
dagster
import
materialize
from
tutorial_project
.
assets
import
(
topstory_ids
,
topstories
,
topstories_word_cloud
)
# Instead of importing one asset, import them all
def
test_hackernews_assets
(
)
:
assets
=
[
topstory_ids
,
topstories
,
topstories_word_cloud
]
result
=
materialize
(
assets
)
assert
result
.
success
    df
=
result
.
output_for_node
(
"topstories"
)
assert
len
(
df
)
==
100
Running the tests
#
Use pytest, or your test runner of choice, to run the unit tests. Navigate to the top-level
tutorial_project
directory (the one that contains the
tutorial_project_tests
directory) and run:
pytest tutorial_project_tests
Wait a few seconds for the tests to run and observe the output in your terminal.
Related
#
Dagster is written to make testing easy in a domain where it has historically been very difficult. Refer to the
Testing
documentation to learn more.
On This Page
Testing assets
Prerequisites
Testing an individual asset
Testing a graph of assets
Running the tests
Related
Edit Page on GitHub
Share Feedback
Star



Documentation Source:
release-1-7-2.dagster.dagster-docs.io/guides/dagster/testing-assets.txt

Documentation Title:
Testing Assets | Dagster Docs

Documentation Content:
Testing Assets | Dagster Docs
Ask AI
Platform
Dagster+
New
Pricing
Blog
Community
Docs
Sign in
Join us on Slack
Star us
Try Dagster+
Platform
Dagster+
Pricing
Blog
Community
Docs
Contact Sales
Sign in
Try Dagster+
Search
the docs
Press
Ctrl
and
K
to search
Getting started
What's Dagster?
Quickstart
Installation
Creating a new project
Getting help
Tutorial
Concepts
Deployment
Integrations
Guides
API Reference
About
1.7.2
/ 0.23.2 (libs)
You are viewing an unreleased or outdated version of the documentation
View Latest Documentation
â†’
Testing assets
#
Creating testable and verifiable data pipelines is one of the focuses of Dagster. We believe ensuring data quality is critical for managing the complexity of data systems. Here, we'll cover how to write unit tests for individual assets, as well as for graphs of assets together.
Prerequisites
#
This guide builds off of the project written in the
tutorial
. If you haven't already, you should complete the tutorial before continuing. Other guides may also build off the project created in the tutorial, but for this guide, we'll assume that the Dagster project is the same as the one created in the tutorial.
It also assumes that you have installed a test runner like
pytest
.
Testing an individual asset
#
We'll start by writing a test for the
topstories_word_cloud
asset definition, which is an image of a word cloud of the titles of top stories on Hacker News. To run the function that derives an asset from its upstream dependencies, we can invoke it directly, as if it's a regular Python function.
Add the following code to the
test_assets.py
file in your
tutorial_project_tests
directory:
import
pandas
as
pd
from
tutorial_project
.
assets
import
topstories_word_cloud
def
test_topstories_word_cloud
(
)
:
df
=
pd
.
DataFrame
(
[
{
"title"
:
"Wow, Dagster is such an awesome and amazing product. I can't wait to use it!"



Documentation Source:
release-1-7-2.dagster.dagster-docs.io/concepts/testing.txt

Documentation Title:
Testing | Dagster

Documentation Content:
Consider the following asset, which requires a resource
bar
.
from
dagster
import
asset
,
ConfigurableResource
class
BarResource
(
ConfigurableResource
)
:
my_string
:
str
@asset
def
asset_requires_bar
(
bar
:
BarResource
)
-
>
str
:
return
bar
.
my_string
def
test_asset_requires_bar
(
)
:
result
=
asset_requires_bar
(
bar
=
BarResource
(
my_string
=
"bar"
)
)
.
.
.
Testing assets with complex resources
#
In order to test assets which rely on complex resources, such as those that build separate clients, a common pattern is to use tools such as the
mock
library to fake your resource and associated client. See the section on
Testing ops with complex resources
for an example.
Testing multiple assets together
#
You may want to test multiple assets together, to more closely mirror actual materialization. This can be done using the
materialize_to_memory
method, which loads the materialized results of assets into memory:
from
dagster
import
asset
,
materialize_to_memory
@asset
def
data_source
(
)
:
return
get_data_from_source
(
)
@asset
def
structured_data
(
data_source
)
:
return
extract_structured_data
(
data_source
)
# An example unit test using materialize_to_memory
def
test_data_assets
(
)
:
result
=
materialize_to_memory
(
[
data_source
,
structured_data
]
)
assert
result
.
success
# Materialized objects can be accessed in terms of the underlying op
materialized_data
=
result
.
output_for_node
(
"structured_data"
)
.
.
.
Mock resources can be provided directly using
materialize_to_memory
:
from
dagster
import
asset
,
materialize_to_memory
,
ConfigurableResource
import
mock
class
MyServiceResource
(
ConfigurableResource
)
:
.
.
.
@asset
def
asset_requires_service
(
service
:
MyServiceResource
)
:
.
.
.
@asset
def
other_asset_requires_service
(
service
:
MyServiceResource
)
:
.
.
.



Documentation Source:
release-1-7-2.dagster.dagster-docs.io/tutorial/building-an-asset-graph.txt

Documentation Title:
Tutorial, part four: Building an asset graph | Dagster Docs

Documentation Content:
Modify your
assets.py
to add the
pandas
import and a new asset called
topstories
:
Add new imports, such as
import pandas as pd
, to the top of
assets.py
import
json
import
os
import
pandas
as
pd
# Add new imports to the top of `assets.py`
import
requests
from
dagster
import
asset
# ... Keep the `topstory_ids` asset from the previous section
@asset
(
deps
=
[
topstory_ids
]
)
# this asset is dependent on topstory_ids
def
topstories
(
)
-
>
None
:
with
open
(
"data/topstory_ids.json"
,
"r"
)
as
f
:
topstory_ids
=
json
.
load
(
f
)
results
=
[
]
for
item_id
in
topstory_ids
:
item
=
requests
.
get
(
f"https://hacker-news.firebaseio.com/v0/item/
{
item_id
}
.json"
)
.
json
(
)
results
.
append
(
item
)
if
len
(
results
)
%
20
==
0
:
print
(
f"Got
{
len
(
results
)
}
items so far."
)
df
=
pd
.
DataFrame
(
results
)
df
.
to_csv
(
"data/topstories.csv"
)
Dependencies between assets are defined using the
deps
parameter of the
@asset
decorator. In this case,
topstory_ids
(the list of IDs) is a dependency of
topstories
(the CSV file).
In your browser, navigate back to Dagster's Global Asset Lineage (
localhost:3000/asset-groups
), and click on the
Reload Definitions
button on the top-right region of the page. This will tell Dagster to re-scan your code for new assets and other definitions without stopping Dagster. You can also use the Command + Option + R (Mac) or Control + Alt (Windows) + R keyboard shortcut to perform the same action.
After reloading your definitions, look at the asset graph to see the relationship between your assets.




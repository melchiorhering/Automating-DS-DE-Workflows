Documentation Source:
airbyte.com/docs.airbyte.com/integrations/sources/postgres/postgres-troubleshooting.txt

Documentation Title:
Troubleshooting Postgres Sources | Airbyte Documentation

Documentation Content:
Depending on the destination connected to this source, however, the schema may be altered. See the destination's documentation for more details.
The following two schema evolution actions are currently supported:
Adding/removing tables without resetting the entire connection at the destination
Caveat: In the CDC mode, adding a new table to a connection may become a temporary bottleneck. When a new table is added, the next sync job takes a full snapshot of the new table before it proceeds to handle any changes.
Resetting a single table within the connection without resetting the rest of the destination tables in that connection
Changing a column data type or removing a column might break connections.
Version Requirements
​
For Airbyte Open Source users,
upgrade
your Airbyte platform to version
v0.58.0
or newer
Use Postgres v9.3.x or above for non-CDC workflows and Postgres v10 or above for CDC workflows
For Airbyte Cloud (and optionally for Airbyte Open Source), ensure SSL is enabled in your environment
CDC Requirements
​
Incremental sync is only supported for tables with primary keys. For tables without primary keys, use
Full Refresh sync
.
Data must be in tables and not views. If you require data synchronization from a view, you would need to create a new connection with
Standard
as
Replication Method
.
The modifications you want to capture must be made using
DELETE
/
INSERT
/
UPDATE
. For example, changes made using
TRUNCATE
/
ALTER
will not appear in logs and therefore in your destination.
Schema changes are not supported automatically for CDC sources. Reset and resync data if you make a schema change.
The records produced by
DELETE
statements only contain primary keys. All other data fields are unset.
Log-based replication only works for master instances of Postgres. CDC cannot be run from a read-replica of your primary database.
An Airbyte database source using CDC replication can only be used with a single Airbyte destination. This is due to how Postgres CDC is implemented - each destination would recieve only part of the data available in the replication slot.
Using logical replication increases disk space used on the database server. The additional data is stored until it is consumed.



Documentation Source:
airbyte.com/tutorials/postgresql-change-data-capture-elt.txt

Documentation Title:
Build an EL(T) from Postgres CDC (Change Data Capture) | Airbyte

Documentation Content:
CDC enables organizations to make informed decisions based on up-to-date data and ensures that data across multiple systems remains consistent and accurate.
What are the prerequisites for setting up CDC in PostgreSQL, and what components are required?
To set up CDC in PostgreSQL, you'll need a PostgreSQL database instance configured with logical replication enabled. Additionally, you'll require a logical decoding plugin, such as pgoutput or wal2json, which converts the WAL records into a format that can be consumed by downstream applications or systems.
Can CDC in PostgreSQL capture all types of data modifications, including inserts, updates, and deletions?
Yes, CDC in PostgreSQL can capture all types of data modifications, including inserts, updates, and deletions. By monitoring changes at the database level and utilizing logical decoding, PostgreSQL CDC ensures that all modifications to database records are captured and made available for replication or analysis.
How does CDC ensure data consistency and integrity when replicating data from PostgreSQL using a data replication tool?
CDC guarantees data consistency and integrity when replicating PostgreSQL data with Airbyte by continuously monitoring database changes, capturing all modifications (inserts, updates, and deletions), and preserving the order of operations during replication. Airbyte's incremental replication minimizes latency, and its built-in data validation and error handling mechanisms ensure accuracy and reliability.
About the Author
Thalia Barrera is a data engineer and technical writer at Airbyte. She has over a decade of experience as an engineer in the IT industry. She enjoys crafting technical and training materials for fellow engineers. Drawing on her computer science expertise and client-oriented nature, she loves turning complex topics into easy-to-understand content.
About the Author
Text Link
Join our newsletter to get all the insights on the data stack
Should you build or buy your data pipelines?
Download our free guide and discover the best approach for your needs, whether it's building your ELT solution in-house or opting for Airbyte Open Source or Airbyte Cloud.
Download now
About the Author
Thalia Barrera is a data engineer and technical writer at Airbyte. She has over a decade of experience as an engineer in the IT industry. She enjoys crafting technical and training materials for fellow engineers. Drawing on her computer science expertise and client-oriented nature, she loves turning complex topics into easy-to-understand content.



Documentation Source:
airbyte.com/blog/behind-the-performance-improvements-of-our-mysql-source.txt

Documentation Title:
Behind Performance Improvements of MySQL source | Airbyte

Documentation Content:
Change Data Capture
(CDC) is the default sync setting when creating new MySQL connectors. CDC offers numerous advantages, including the ability to capture changes made to data and database schema, all while imposing minimal additional load on the database itself. This provides users with a robust, high-performance default configuration for MySQL data synchronization.
As for Postgres, we built logic in the MySQL connector to automatically switch from checkpointing by primary key during the initial snapshot to the incremental mode of choice, typically CDC. The primary key load is useful only for the initial sync. After that point, we need to transition to another method to only sync data which has changed. But modifications & inserts can happen to a primary key continuously which requires us to switch to CDC mode or user-defined cursor mode.
With these improvements to both initial and incremental syncs, we also had to address a certain number of edge cases, including:
No primary keys:
Some tables do not have primary keys defined. In such rare cases, we have to default to the legacy method of loading data which can be inefficient.
Storage Engines:
MySQL allows users to specify their own storage engines. We’ve built this flow primarily for the default storage engine (InnoDB), which handles the most common scenario. Future work will include understanding different storage engines and optimizing for those use cases as well.
Composite Indexes:
When
optimizing the MySQL table
, it's important to note that tables can have composite indexes. In these cases, the first field associated with the composite primary key (e.g. a user_id field) is the field that represents the order in which table rows are stored on disk and the one that should be used for checkpointing an initial sync.
One area of future improvement is to read changes from the
binlog
during the initial sync. This will prevent a data re-sync scenario where an initial sync for a very large MySQL dataset could take longer than the binlog retention time configured in your MySQL instance.
Compressing State in Logical Replication (CDC) Mode
State messages play a pivotal role in tracking sync progress within the Airbyte platform. In CDC mode, these messages are passed to Debezium, which reads binlogs to determine where to resume
data replication
.



Documentation Source:
airbyte.com/tutorials/incremental-change-data-capture-cdc-replication.txt

Documentation Title:
Airbyte's incremental Change Data Capture (CDC) replication | Airbyte

Documentation Content:
Non-CDC (i.e. standard)
incremental replication
periodically executes queries on a source system for new or updated records, and then transmits the results of these queries to the destination. However, because a query cannot return deleted records, standard incremental replication does not correctly transmit deletions from the source to the destination. Additionally, the records that are transmitted in each sync only represent the state of the source database at the moment the sync is executed – any intermediate changes (such as multiple updates to a single record) will not be correctly captured. Furthermore, because each incremental sync executes queries against the source to detect modifications, it requires the source data to have a suitable
cursor field
such as
updated_at
, which is used to keep track of which records have already been replicated.
On the other hand, CDC incremental replication reads a log of the changes that have been made to the source database and transmits these changes to the destination. Because changes are read from a transaction log when using CDC, it is not necessary for the source data to have a suitable cursor field. Additionally, intermediate changes and deletions on the source are correctly transmitted to the destination because they are logged just like any other modification to the source data.
The differences between CDC incremental replication and non-CDC incremental replication are summarized in the table below:
CDC replication can also be used in conjunction with full
refresh replication
. However, as mentioned in the
CDC documentation
, full refresh replication mode is done with the same process both with and without CDC.
Launch a Postgres source and destination
The above discussion has given a brief overview of how CDC sync modes work. The remainder of this article is focussed on a step-by-step overview of CDC with incremental deduped history replication.
ℹ️  The examples in this tutorial are presented with new/empty Postgres containers, but it is not a requirement that your source and destination databases are empty. Furthermore, these examples use the root postgres users which should not be done for production. For instructions on how to set up a more secure configuration, see the tutorial:
Build an EL(T) from PostgreSQL using Change Data Capture (CDC)
.




Documentation Source:
airbyte.com/tutorials/version-control-airbyte-configurations.txt

Documentation Title:
Version control Airbyte configurations with Octavia CLI | Airbyte

Documentation Content:
octavia apply

üêô - Octavia is targetting your Airbyte instance running at http://localhost:8000 on workspace 36ddb450-66e4-4988-91bf-67279eed5098.
üêô - bigquery does not exists on your Airbyte instance, let's create it!
üéâ - Successfully created bigquery on your Airbyte instance!
üíæ - New state for bigquery saved at ./destinations/bigquery/state_36ddb450-66e4-4988-91bf-67279eed5098.yaml
üêô - postgres exists on your Airbyte instance according to your state file, let's check if we need to update it!
üò¥ - Did not update because no change detected.
Then you can see that the changes were applied in the UI. Remember to test the connection.
Create a connection with Octavia CLI
Once you have source and destination configuration files, you can create a connection template with the
octavia generate connection
command.
octavia generate connection --source sources/postgres/configuration.yaml --destination destinations/bigquery/configuration.yaml postgres-to-bigquery

üêô - Octavia is targetting your Airbyte instance running at http://localhost:8000 on workspace 36ddb450-66e4-4988-91bf-67279eed5098.
‚úÖ - Created the connection template for postgres-to-bigquery in connections/postgres_to_bigquery/configuration.yaml.
After editing the configuration, your configuration should look like this:
cat connections/postgres_to_bigquery/configuration.yaml

definition_type: connection
resource_name: "postgres-to-bigquery"
source_configuration_path: sources/postgres/configuration.yaml
destination_configuration_path: destinations/bigquery/configuration.yaml

configuration:
  status: active
  namespace_definition: source
  namespace_format: "${SOURCE_NAMESPACE}"
  prefix: ""
  resource_requirements:
    cpu_limit: ""
    cpu_request: ""
    memory_limit: ""
    memory_request: ""
  schedule_type: manual
  sync_catalog: # OPTIONAL | object | üö® ONLY edit streams.config, streams.stream should not be edited as schema cannot be changed.



Documentation Source:
airbyte.com/tutorials/version-control-airbyte-configurations.txt

Documentation Title:
Version control Airbyte configurations with Octavia CLI | Airbyte

Documentation Content:
To create a source definition with Octavia CLI you can use the
octavia generate source
command. You will need to pass a DEFINITION_ID and RESOURCE_NAME. Due to a
current limitation
, to create a source, you first need to get the definition id for the source. You can run the command
octavia list connectors sources
to get the connector id:
octavia list connectors sources | grep postgres

Postgres                                airbyte/source-postgres                        1.0.22            decd338e-5647-4c0b-adf4-da0e75f5a750
Then you can bootstrap a Postgres source with the
octavia generate source
command:
octavia generate source decd338e-5647-4c0b-adf4-da0e75f5a750 postgres

üêô - Octavia is targetting your Airbyte instance running at http://localhost:8000 on workspace 36ddb450-66e4-4988-91bf-67279eed5098.
‚úÖ - Created the source template for postgres in sources/postgres/configuration.yaml.
The CLI creates a
postgres
folder under sources with a
configuration.yaml
file.
tree .
.
‚îú‚îÄ‚îÄ api_http_headers.yaml
‚îú‚îÄ‚îÄ connections
‚îú‚îÄ‚îÄ destinations
‚îî‚îÄ‚îÄ sources
    ‚îî‚îÄ‚îÄ postgres
        ‚îî‚îÄ‚îÄ configuration.yaml

4 directories, 2 files
The YAML file contains all the fields with the default values you see on the UI, and the description for each field as a comment. Below you can see the beginning of the file.
more sources/postgres/configuration.yaml 

# Configuration for airbyte/source-postgres
# Documentation about this connector can be found at https://docs.airbyte.com/integrations/sources/postgres
resource_name: "postgres"
definition_type: source
definition_id: decd338e-5647-4c0b-adf4-da0e75f5a750
definition_image: airbyte/source-postgres
definition_version: 1.0.22

# EDIT THE CONFIGURATION BELOW!
configuration:
  ssl: # OPTIONAL | boolean | Encrypt data using SSL. When activating SSL, please select one of the connection modes.



Documentation Source:
airbyte.com/tutorials/version-control-airbyte-configurations.txt

Documentation Title:
Version control Airbyte configurations with Octavia CLI | Airbyte

Documentation Content:
If an error occurs, you will get a stack trace from the API response.
octavia apply

üêô - Octavia is targetting your Airbyte instance running at http://localhost:8000 on workspace 36ddb450-66e4-4988-91bf-67279eed5098.
üêô - postgres does not exists on your Airbyte instance, let's create it!
üéâ - Successfully created postgres on your Airbyte instance!
üíæ - New state for postgres saved at ./sources/postgres/state_36ddb450-66e4-4988-91bf-67279eed5098.yaml
Then you can check that the configuration is also available in the UI.
After you apply some configuration changes with Octavia, no connection test will be run like when you save connector settings in the UI (see
GitHub issue
). You can still use the UI to test that the source setting allows Airbyte to connect.
‚Äç
After you apply some changes, Octavia creates a
state.yaml
file in the resource directory with the checksum of the latest configuration applied and the generation timestamp. The state files are instance and workspace specific so they are only useful when multiple users or Octavia CLI processes work on the same instance and workspace. If you apply the same configuration across multiple instances, then you don‚Äôt need to commit state files in your Git repository.
Each time you run the apply command, Octavia will also compute and display differences between the current resource state locally including changes since you last run the apply command, and the state in your Airbyte instance including changes you may have done on the UI.



Documentation Source:
airbyte.com/tutorials/version-control-airbyte-configurations.txt

Documentation Title:
Version control Airbyte configurations with Octavia CLI | Airbyte

Documentation Content:
When activating SSL, please select one of the connection modes.
  host: # REQUIRED | string | Hostname of the database.
  port: 5432 # REQUIRED | integer | Port of the database. | Example: 5432
  schemas: ["public"] # OPTIONAL | array | The list of schemas (case sensitive) to sync from. Defaults to public.
  database: # REQUIRED | string | Name of the database.
  password: ${PASSWORD} # SECRET (please store in environment variables) | OPTIONAL | string | Password associated with the username.
You must edit the configuration above before applying the changes to your Airbyte instance. You must fill in the values for the REQUIRED fields and edit, comment, or delete the lines for the OPTIONAL fields. Commenting on the OPTIONAL fields may be useful when you want to edit the configuration in the future as you keep all options like in the UI. Otherwise, you can generate a new source configuration to see all available options.
Source and destination configurations have credential fields you want to store as something other than plain text. Octavia offers secret management through environment variables expansion on configuration files. You can set environment variables in your
~/.octavia
file. Then you can reference these variables on your configuration files with ${POSTGRES_PASSWORD}. After editing the configuration, it should look like this:
cat sources/postgres/configuration.yaml

resource_name: "postgres"
definition_type: source
definition_id: decd338e-5647-4c0b-adf4-da0e75f5a750
definition_image: airbyte/source-postgres
definition_version: 1.0.14

configuration:
  host: ${POSTGRES_HOST}
  port: 2000
  schemas: ["public"]
  database: ${POSTGRES_DATABASE}
  password: ${POSTGRES_PASSWORD}
  ssl_mode:
    mode: "disable"
  username: ${POSTGRES_USERNAME}
  tunnel_method:
    tunnel_method: "NO_TUNNEL"
  replication_method:
    method: "Standard"
To apply the changes to your local Airbyte instance, you can run
octavia apply
. Octavia will validate the configuration against a JSON schema and will fail to apply the changes if finding any configuration error.




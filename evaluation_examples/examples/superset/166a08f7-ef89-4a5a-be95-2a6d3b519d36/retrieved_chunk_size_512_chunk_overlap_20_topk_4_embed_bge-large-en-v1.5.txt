Documentation Source:
superset.apache.org/docs/configuration/event-logging/index.txt

Documentation Title:
Event Logging | Superset

Documentation Content:
Event Logging | Superset
Skip to main content
Documentation
Getting Started
FAQ
Community
Resources
GitHub
Slack
Mailing List
Stack Overflow
Get Started
Search
Introduction
Quickstart
Installation
Configuration
Configuring Superset
Connecting to Databases
Alerts and Reports
Caching
Async Queries via Celery
SQL Templating
Timezones
Network and Security Settings
Setup SSH Tunneling
Event Logging
Country Map Tools
Importing and Exporting Datasources
Using Superset
Contributing
Security
FAQ
API
Edit this page on GitHub
Configuration
Event Logging
On this page
Logging
Event Logging
​
Superset by default logs special action events in its internal database (DBEventLogger). These logs can be accessed
on the UI by navigating to
Security > Action Log
. You can freely customize these logs by
implementing your own event log class.
When custom log class is enabled DBEventLogger is disabled and logs
stop being populated in UI logs view.
To achieve both, custom log class should extend built-in DBEventLogger log class.
Here's an example of a simple JSON-to-stdout class:
def
log
(
self
,
user_id
,
action
,
*
args
,
**
kwargs
)
:
records
=
kwargs
.
get
(
'records'
,
list
(
)
)
dashboard_id
=
kwargs
.
get
(
'dashboard_id'
)
slice_id
=
kwargs
.
get
(
'slice_id'
)
duration_ms
=
kwargs
.
get
(
'duration_ms'
)
referrer
=
kwargs
.
get
(
'referrer'
)
for
record
in
records
:
log
=
dict
(
action
=
action
,
json
=
record
,
dashboard_id
=
dashboard_id
,
slice_id
=
slice_id
,
duration_ms
=
duration_ms
,
referrer
=
referrer
,
user_id
=
user_id
)
print
(
json
.
dumps
(
log
)
)
End by updating your config to pass in an instance of the logger you want to use:
EVENT_LOGGER = JSONStdOutEventLogger()
StatsD Logging
​
Superset can be configured to log events to
StatsD
if desired.



Documentation Source:
superset.apache.org/docs/faq/index.txt

Documentation Title:
FAQ | Superset

Documentation Content:
The API available is documented using
Swagger
and the documentation can be
made available under
/swagger/v1
by enabling the following flag in
superset_config.py
:
FAB_API_SWAGGER_UI = True
There are other undocumented
[private]
ways to interact with Superset programmatically that offer no
guarantees and are not recommended but may fit your use case temporarily:
using the ORM (SQLAlchemy) directly
using the internal FAB ModelView API (to be deprecated in Superset)
altering the source code in your fork
How can I see usage statistics (e.g., monthly active users)?
​
This functionality is not included with Superset, but you can extract and analyze Superset's application
metadata to see what actions have occurred.  By default, user activities are logged in the
logs
table
in Superset's metadata database.  One company has published a write-up of
how they analyzed Superset
usage, including example queries
.
What Does Hours Offset in the Edit Dataset view do?
​
In the Edit Dataset view, you can specify a time offset. This field lets you configure the
number of hours to be added or subtracted from the time column.
This can be used, for example, to convert UTC time to local time.
Does Superset collect any telemetry data?
​
Superset uses
Scarf
by default to collect basic telemetry data upon installing and/or running Superset. This data helps the maintainers of Superset better understand which versions of Superset are being used, in order to prioritize patch/minor releases and security fixes.
We use the
Scarf Gateway
to sit in front of container registries, the
scarf-js
package to track
npm
installations, and a Scarf pixel to gather anonymous analytics on Superset page views.
Scarf purges PII and provides aggregated statistics. Superset users can easily opt out of analytics in various ways documented
here
and
here
.
Superset maintainers can also opt out of telemetry data collection by setting the
SCARF_ANALYTICS
environment variable to
false
in the Superset container (or anywhere Superset/webpack are run).
Additional opt-out instructions for Docker users are available on the
Docker Installation
page.



Documentation Source:
superset.apache.org/docs/using-superset/exploring-data/index.txt

Documentation Title:
Exploring Data in Superset | Superset

Documentation Content:
Click on the entry to
launch an Explore workflow using this dataset.
In this section, we'll create a table visualization
to show the number of flights and cost per travel class.
By default, Apache Superset only shows the last week of data. In our example, we want to visualize all
of the data in the dataset. Click the
Time ‣ Time Range
section and change
the
Range Type
to
No Filter
.
Click
Apply
to save.
Now, we want to specify the rows in our table by using the
Group by
option. Since in this
example, we want to understand different Travel Classes, we select
Travel Class
in this menu.
Next, we can specify the metrics we would like to see in our table with the
Metrics
option.
COUNT(*)
, which represents the number of rows in the table
(in this case, quantity of flights in each Travel Class)
SUM(Cost)
, which represents the total cost spent by each Travel Class
Finally, select
Run Query
to see the results of the table.
To save the visualization, click on
Save
in the top left of the screen. In the following modal,
Select the
Save as
option and enter the chart name as Tutorial Table (you will be able to find it again through the
Charts
screen, accessible in the top menu).
Select
Add To Dashboard
and enter
Tutorial Dashboard. Finally, select
Save & Go To Dashboard
.
Dashboard Basics
​
Next, we are going to explore the dashboard interface. If you’ve followed the previous section, you
should already have the dashboard open. Otherwise, you can navigate to the dashboard by selecting
Dashboards on the top menu, then Tutorial dashboard from the list of dashboards.
On this dashboard you should see the table you created in the previous section. Select
Edit
dashboard
and then hover over the table. By selecting the bottom right hand corner of the table
(the cursor will change too), you can resize it by dragging and dropping.
Finally, save your changes by selecting Save changes in the top right.
Pivot Table
​
In this section, we will extend our analysis using a more complex visualization, Pivot Table.



Documentation Source:
superset.apache.org/docs/using-superset/exploring-data/index.txt

Documentation Title:
Exploring Data in Superset | Superset

Documentation Content:
Next, in the Time Comparison subsection of
Advanced Analytics
, enter the Time Shift by typing in
“minus 1 week” (note this box accepts input in natural language). Run Query to see the new chart,
which has an additional series with the same values, shifted a week back in time.
Then, change the
Calculation type
to Absolute difference and select
Run Query
. We can now
see only one series again, this time showing the difference between the two series we saw
previously.
Save the chart as Tutorial Time Comparison and add it to the Tutorial Dashboard.
Resampling the data
​
In this section, we’ll resample the data so that rather than having daily data we have weekly data.
As in the previous section, reopen the Tutorial Advanced Analytics Base chart.
Next, in the Python Functions subsection of
Advanced Analytics
, enter 7D, corresponding to seven
days, in the Rule and median as the Method and show the chart by selecting
Run Query
.
Note that now we have a single data point every 7 days. In our case, the value showed corresponds to
the median value within the seven daily data points. For more information on the meaning of the
various options in this section, refer to the
Pandas documentation
.
Lastly, save your chart as Tutorial Resample and add it to the Tutorial Dashboard. Go to the
tutorial dashboard to see the four charts side by side and compare the different outputs.
Edit this page
Previous
Creating Your First Dashboard
Next
Issue Codes
Exploring Data in Superset
Enabling Data Upload Functionality
Loading CSV Data
Table Visualization
Dashboard Basics
Pivot Table
Line Chart
Markup
Publishing Your Dashboard
Annotations
Advanced Analytics
Rolling Mean
Time Comparison
Resampling the data
We use
Copyright © 2024,
          The
Apache Software Foundation
,
          Licensed under the Apache
License
.
Apache Superset, Apache, Superset, the Superset logo, and the Apache feather logo are either registered trademarks or trademarks of The Apache Software Foundation. All other products or name brands are trademarks of their respective holders, including The Apache Software Foundation.
Apache Software Foundation
resources
Security
|
Donate
|
Thanks
|
Events
|
License
|
Privacy




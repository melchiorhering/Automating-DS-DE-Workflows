Documentation Source:
docs.astronomer.io/astro/first-dag-cli.txt

Documentation Title:
Run your first DAG with the Astro CLI | Astronomer Documentation

Documentation Content:
This prevents your example DAG from running automatically and consuming your Deployment resources.
Step 6: View your DAG status in the Astro UI
​
The Astro UI shows you information about the health of your Deployment, including analytics and logs for your DAG runs.
Go back to your Deployment page in the Astro UI. Because you ran your example DAG, your Deployment information page now has data about your Deployment and DAG runs. The following example shows an example of what you might find in the
Overview
page for your Deployment.
When you're done exploring, you can delete your Deployment from the
More Options
menu on your
Deployments
page.
Next Steps
​
Now that you've created and run your first DAG on Astro, the next step is to add your own DAGs, build out the rest of your Astro project, and start testing real data. See:
Develop a project
.
Install Docker
to use the full capabilities of the Astro CLI, such as the ability to run Airflow locally and deploy the rest of your Astro project to Astro, including Python packages.
Write your First DAG
.
Deploy code to Astro
.
Was this page helpful?
Yes
No
Sign up for Developer Updates
Get a summary of new Astro features once a month.
Submit
You can unsubscribe at any time.
By proceeding you agree to our
Privacy Policy
, our
Website Terms
and to receive emails from Astronomer.
Edit this page
Previous
With GitHub Actions
Next
Log in to Astro
Prerequisites
Step 1: Install the Astro CLI
Step 2: Create a Deployment
Step 3: Create an Astro project
Step 4: Deploy example DAGs to your Astro Deployment
Step 5: Trigger your DAG on Astro
Step 6: View your DAG status in the Astro UI
Next Steps
Legal
·
Privacy
·
Security
·
Cookie Preferences
© Astronomer 2023. Various trademarks held by their respective owners.



Documentation Source:
docs.astronomer.io/learn/get-started-with-airflow.txt

Documentation Title:
Get started with Apache Airflow, Part 1: Write and run your first DAG | Astronomer Documentation

Documentation Content:
You've also learned how to navigate the Airflow UI and view task logs. To continue learning about Airflow, see
Get started with Apache Airflow, Part 2: Providers, connections, and variables
.
See also
​
An introduction to the Airflow UI
Introduction to Airflow DAGs
Airflow operators
Introduction to the TaskFlow API and Airflow decorators
Datasets and data-aware scheduling in Airflow
Pass data between tasks
Manage task and task group dependencies in Airflow
Create dynamic Airflow tasks
Was this page helpful?
Yes
No
Sign up for Developer Updates
Get a summary of new Astro features once a month.
Submit
You can unsubscribe at any time.
By proceeding you agree to our
Privacy Policy
, our
Website Terms
and to receive emails from Astronomer.
Edit this page
Previous
Quickstart
Next
Part 1: Write your first DAG
Time to complete
Assumed knowledge
Prerequisites
Step 1: Create an Astro project
Step 2: Start Airflow
Step 3: Log in to the Airflow UI
Step 4: Trigger a DAG run
Step 5: Explore the Airflow UI
Step 6: Write a new DAG
Step 7: Run the new DAG
Step 8: View task logs
Next steps
See also
Legal
·
Privacy
·
Security
·
Cookie Preferences
© Astronomer 2023. Various trademarks held by their respective owners.



Documentation Source:
docs.astronomer.io/astro/first-dag-github-actions.txt

Documentation Title:
Run your first DAG with GitHub Actions | Astronomer Documentation

Documentation Content:
If you don't see the
Deploy your first DAG
option your Deployment page, click
Deploy DAGs ?
to open it.
Step 2: Fork the example project repository
​
This repository contains an
Astro project
, which is a collection of files required for running Airflow on Astro. An Astro project includes folders for DAG files, plugins, dependencies, and more. Specifically, this Astro project includes an example DAG which, when you run it, retrieves a list of countries from an Astro S3 data store and filters the list through a data transform.
Open
the example project repository
in a new tab or browser window.
Choose an owner
from your available options.
Keep the selection to
Copy the
main
branch only
.
Click
Create fork
.
Step 3: Set up the GitHub Actions Workflow
​
This example repository also includes a pre-configured
Astronomer deploy action
, which you can use to set up a CI/CD deployment pipeline. In this step, you'll configure the GitHub action to deploy code from your forked repository to Astro and run the workflow.
Open two browser windows: one with the
Astro UI
, and one with your forked GitHub repository.
In the Astro UI, choose the Deployment where you want to deploy your Astro project.
In GitHub, open your forked repository and click
Actions
.
Click
I understand my workflows, go ahead and enable them.
The
workflow
is a script that uses API tokens to deploy DAGs from a GitHub repository to your Deployment, without requiring any local development.
Choose the
Astronomer CI - Deploy Code
workflow.
Click
Run workflow
. This opens a modal to enter information about your Astro Deployment.
In the Astro UI, copy your
Deployment ID
from the Deployment information.
In GitHub, paste your
Deployment ID
.
In the Astro UI, click
API Tokens
.
Click
+ API Token
to create a new API token, and give the token a
Name
and an
Expiration
.
Click
Create API Token
, then copy the token that appears.
warning
For security reasons, this is the only opportunity you have to copy your API token. After you exit the modal window, you cannot copy it again.



Documentation Source:
docs.astronomer.io/astro/first-dag-cli.txt

Documentation Title:
Run your first DAG with the Astro CLI | Astronomer Documentation

Documentation Content:
It should be similar to
C:\Users\myname\AppData\Local\Microsoft\WinGet\Packages\Astronomer.Astro_Microsoft.Winget.Source_8wekyb3d8bbwe
.
Paste the path into File Explorer or open the file path in terminal, then rename the Astro executable to
astro.exe
.
For more information about Astro CLI install options and troubleshooting, see
Install the Astro CLI
.
tip
If you're encountering problems with installing the CLI or don't want to install software locally, see
Run your first DAG with GitHub Actions
.
Run the following command to install the latest version of the Astro CLI directly to
PATH
:
curl
-sSL
install.astronomer.io
|
sudo
bash
-s
For more information about Astro CLI install options and troubleshooting, see
Install the Astro CLI
.
Step 2: Create a Deployment
​
An Astro
Deployment
is an instance of Apache Airflow that is powered by all core Airflow components, including a webserver, scheduler, and one or more workers. You deploy DAGs to a Deployment, and you can have one or more Deployments within a Workspace.
Log in to the
Astro UI
.
On the
Deployments
page, click
+ Deployment
.
In the
Name
field, enter a name for your Deployment. You can leave the other fields at their default values. This creates a basic Deployment on a standard Astronomer-hosted cluster. You can delete the Deployment after you finish testing your example DAG runs.
Click
Create Deployment
.
A confirmation message appears indicating that the Deployment status is
Creating
until all underlying components in the Deployment are healthy. During this time, the Airflow UI is unavailable and you can't deploy code or modify Deployment settings. When the Deployment is ready, the status changes to
Healthy
.
For more information about possible Deployment health statuses, see
Deployment health
. Or, to learn more about how to customize your Deployment settings, see
Deployment settings
.
Step 3: Create an Astro project
​
An
Astro project
contains the set of files necessary to run Airflow, including dedicated folders for your DAG files, plugins, and dependencies.




Documentation Source:
www.metabase.com/learn/administration/serialization.txt

Documentation Title:
Serialization: preloading dashboards in a new Metabase instance

Documentation Content:
["setup-token"]'
)
MB_TOKEN
=
$(
curl
-s
-X
POST
\
-H
"Content-type: application/json"
\
http://
${
METABASE_HOST
}
:
${
METABASE_PORT
}
/api/setup
\
-d
'{
    "token": "'
${
SETUP_TOKEN
}
'",
    "user": {
        "email": "'
${
ADMIN_EMAIL
}
'",
        "first_name": "Metabase",
        "last_name": "Admin",
        "password": "'
${
ADMIN_PASSWORD
}
'"
    },
    "prefs": {
        "allow_tracking": false,
        "site_name": "Metawhat"
    }
}'
| jq
-r
'.id'
)
echo
-e
"
\n
ðŸ‘¥ Creating some basic users: "
curl
-s
"http://
${
METABASE_HOST
}
:
${
METABASE_PORT
}
/api/user"
\
-H
'Content-Type: application/json'
\
-H
"X-Metabase-Session:
${
MB_TOKEN
}
"
\
-d
'{"first_name":"Basic","last_name":"User","email":"basic@somewhere.com","login_attributes":{"region_filter":"WA"},"password":"'
${
ADMIN_PASSWORD
}
'"}'
curl
-s
"http://
${
METABASE_HOST
}
:
${
METABASE_PORT
}
/api/user"
\
-H
'Content-Type: application/json'
\
-H
"X-Metabase-Session:
${
MB_TOKEN
}
"
\
-d
'{"first_name":"Basic 2","last_name":"User","email":"basic2@somewhere.com","login_attributes":{"region_filter":"CA"},"password":"'
${
ADMIN_PASSWORD
}
'"}'
echo
-e
"
\n
ðŸ‘¥ Basic users created!"
Save the above code as
create_users.sh
, and make it executable:
chmod
+x create_users.sh
Then run:
MB_HOSTNAME
=
localhost
MB_PORT
=
5001 ./create_users.sh
With your metabase-source instance up, and your users created, open up
http://localhost:5001
and sign in as the admin user you created.



Documentation Source:
www.metabase.com/learn/administration/serialization.txt

Documentation Title:
Serialization: preloading dashboards in a new Metabase instance

Documentation Content:
#!/bin/sh
ADMIN_EMAIL
=
${
MB_ADMIN_EMAIL
:-
admin
@metabase.local
}
ADMIN_PASSWORD
=
${
MB_ADMIN_PASSWORD
:-
Metapass123
}
METABASE_HOST
=
${
MB_HOSTNAME
}
METABASE_PORT
=
${
MB_PORT
:-
3000
}
echo
"âŒšï¸Ž Waiting for Metabase to start"
while
(!
curl
-s
-m
5 http://
${
METABASE_HOST
}
:
${
METABASE_PORT
}
/api/session/properties
-o
/dev/null
)
;
do
sleep
5
;
done
echo
"ðŸ˜Ž Creating admin user"
SETUP_TOKEN
=
$(
curl
-s
-m
5
-X
GET
\
-H
"Content-Type: application/json"
\
http://
${
METABASE_HOST
}
:
${
METABASE_PORT
}
/api/session/properties
\
| jq
-r
'.



Documentation Source:
www.metabase.com/docs/v0.49/configuring-metabase/setting-up-metabase.txt

Documentation Title:
Setting up Metabase

Documentation Content:
We wonâ€™t be able to connect to your database without it, but youâ€™d like to deal with all of this later, thatâ€™s okay: just click
Iâ€™ll add my data later
. Metabase comes with a
Sample Database
that you can play around with to get a feel for how Metabase works.
If youâ€™re ready to connect, hereâ€™s what youâ€™ll need:
The
hostname
of the server where your database lives
The
port
the database server uses
The
database name
The
username
you use for the database
The
password
you use for the database
If you donâ€™t have this information handy, the person responsible for administering the database should have it.
Connect to your database
Now that you have your database info you can connect to your database. Sweet, sweet data at last. Just go ahead and put your info into this form and click
Next
.
For more on connecting to databases, see
Adding and managing databases
.
Usage data preferences
One last quick thing that youâ€™ll have to decide is if itâ€™s okay for us to collect some anonymous info about how you use the product â€” it helps us make Metabase better. Like the box says:
Metabase never collects anything about your data or question results.
All collection is completely anonymous.
Collection can be turned off at any point in your admin settings.
If youâ€™re ready to start using Metabase, go ahead and click
Next
.
Staying in touch
At this point you are all set and ready to use Metabase. Since we like keeping in touch with our friends we made it easy to sign up for our newsletter (infrequent emails) with a single click!
Once youâ€™re done here simply follow the link to
Take me to Metabase
. And if you decided to skip the newsletter sign-up, itâ€™s cool, we still like you :)
Getting started with Metabase
For a tutorial on getting up and running with questions and dashboards, head over to
Learn Metabase
.
If youâ€™d like more technical resources to set up your data stack with Metabase, connect with a
Metabase Expert
.
Read docs for other
versions of Metabase
.
Did this article help you?



Documentation Source:
www.metabase.com/docs/v0.49/embedding/interactive-embedding-quick-start-guide.txt

Documentation Title:
Interactive embedding quick start

Documentation Content:
Copy this key, as youâ€™ll need it in the next section.
Save and enable JWT authentication
Weâ€™ll set up group synchronization later, but for now, be sure to click the
Save and enable
button to activate JWT authentication.
Set up SSO with JWT in your appâ€™s server
Add the signing key and Metabase site URL to your app
Here youâ€™ll need to input some values for your SSO to work.
Youâ€™ll want to declare up two constants in your app:
METABASE_JWT_SHARED_SECRET
, paste the JWT signing key that you got from your Metabase here.
METABASE_SITE_URL
, which points to your Metabaseâ€™s root path.
const
METABASE_JWT_SHARED_SECRET
=
"
YOURSIGNINGKEY
"
;
const
METABASE_SITE_URL
=
"
https://your-domain.metabaseapp.com
"
;
The signing key should preferably be setup as an environment variable, to avoid accidentally committing your key to your appâ€™s repo.
Add a JWT library to your appâ€™s server
Add a JWT library to your app. For example, if youâ€™re using a Node backend with JavaScript, we recommend using
jsonwebtoken
.
In your terminal:
npm
install
jsonwebtoken
--save
And in your app, require the library:
const
jwt
=
require
(
"
jsonwebtoken
"
);
Restricting access to certain routes
Presumably, your app already has some way of making sure some routes are only accessible after having signed in. Our examples use a simple helper function named
restrict
that protects these routes:
function
restrict
(
req
,
res
,
next
)
{
if
(
req
.
session
.
user
)
{
next
();
}
else
{
req
.
session
.
returnTo
=
req
.
originalUrl
;
req
.
session
.
error
=
"
Access denied!
"
;
res
.
redirect
(
"
/login
"
);
}
}
Add a function to sign users
We need to write a function to sign user JWTs, using the JWT library.
const
signUserToken
=
user
=>
jwt
.
sign
(
{
email
:
user
.
email
,
first_name
:
user
.
firstName
,
last_name
:
user
.




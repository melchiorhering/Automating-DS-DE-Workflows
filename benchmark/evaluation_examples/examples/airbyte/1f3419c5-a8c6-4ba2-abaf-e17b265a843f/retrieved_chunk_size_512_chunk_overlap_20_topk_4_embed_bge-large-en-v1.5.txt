Documentation Source:
airbyte.com/tutorials/incremental-data-synchronization.txt

Documentation Title:
Incremental data synchronization between Postgres databases | Airbyte

Documentation Content:
‍
Update: Modify a record in the source
Go back to the Postgres shell in the
airbyte-source
container that you opened earlier in this tutorial, and update a record in
table_one
and view the table as follows:
UPDATE table_one SET name='Eg2b IncAp' WHERE id=2;
SELECT * FROM table_one;
‍
And the source
table_one
table should now look as follows:
id |    name    |         updated_at         
----+------------+----------------------------
  1 | Eg1 IncApp | 2022-09-01 11:01:41.666004
  2 | Eg2b IncAp | 2022-09-01 11:16:38.093877
(2 rows)
‍
The
name
and the
updated_at
values have been updated as expected. Execute a new sync by clicking on
Sync Now
in the connections UI and wait for the sync to complete. You should see a response indicating that one record has been emitted, as follows:
‍
‍
ℹ️  Note that opposed to the full sync modes discussed in the
previous tutorial
which would emit all of the records in the source on each sync, in the incremental sync modes only new or modified records are emitted – this is handled in the source connector logic, which only selects new documents in the source for replication to the destination.
A single record has been emitted, which corresponds to the record that was just updated. Additionally, make a note of the
job ID
and the
attempt ID
which in this case are 150 and 0. You will use these values later to view the SQL that has been used for normalization.
Update: View the raw table in the destination
Look at the raw table called
_airbyte_raw_table_one
by executing the following command in the destination Postgres shell:
SELECT * FROM _airbyte_raw_table_one;
‍
Which should respond with a table that looks as follows:
_airbyte_ab_id            |                                _airbyte_data                                |    _airbyte_emitted_at     
--------------------------------------+-----------------------------------------------------------------------------+----------------------------
 2abc7493-bfc8-4493-ab62-de6ffe094a2d | {"id": 1,



Documentation Source:
airbyte.com/tutorials/incremental-data-synchronization.txt

Documentation Title:
Incremental data synchronization between Postgres databases | Airbyte

Documentation Content:
Start a source Postgres container running at port 2000 on localhost as follows:
docker run --rm --name airbyte-source -e POSTGRES_PASSWORD=password -p 2000:5432 -d debezium/postgres:13
Start a destination Postgres container running at port 3000 on localhost as follows:
docker run --rm --name airbyte-destination -e POSTGRES_PASSWORD=password -p 3000:5432 -d debezium/postgres:13
Define the source and destination in Airbyte
Instantiate a Postgres source connector
Create a new data source by clicking
+ New source
as follows.
‍
‍
Then select
Postgres
as the source as follows:
And define a source connector called
Incremental-source
as follows:
‍
Instantiate a Postgres destination connector
Define a new Postgres destination called
Incremental-destination
as follows:
‍
‍
Exploring incremental append synchronization
In this section, you will explore incremental database replication with the
Incremental Sync - Append
mode and will examine the SQL that is used for normalizing the data in the destination Postgres database.
Define the first Postgres source table
You will now create and populate a table called
table_one
. First open a shell on the source Postgres database with the following command:
docker exec -it airbyte-source psql --username=postgres
‍
The Postgres terminal should respond with a prompt such as
postgres=#
. Create a new table called
table_one
in the source database as follows:
CREATE TABLE table_one(
  id integer PRIMARY KEY,
  name VARCHAR(200),
  updated_at timestamp DEFAULT NOW() NOT NULL
);
‍
Notice that the table includes a field called
updated_at
, which will be used as the
cursor field
(discussed above). A cursor is required in order for incremental sync to keep track of records that have previously been synchronized, so that they are not re-sent to the destination.
In order for the cursor to work correctly, the
updated_at
field in this table must be updated each time a record is written or modified. When using Postgres, this can be automated with a
Postgres trigger
.



Documentation Source:
airbyte.com/tutorials/full-data-synchronization.txt

Documentation Title:
Explore Airbyte's full refresh data synchronization | Airbyte

Documentation Content:
I will discuss this in more detail after the next sync.
Insert a new record on the source
If you don’t have a terminal open on the Postgres source database, open one as follows:
docker exec -it airbyte-source /bin/bash
psql --username=postgres
‍
Add a new record to the source Postgres database as follows:
INSERT INTO full_refresh_demo(id, name) VALUES(3, 'Alex M');
‍
And view the source table by executing:
SELECT * FROM full_refresh_demo;
‍
The source table should look as follows:
id |  name  
----+--------
  1 | Mary X
  2 | John D
  3 | Alex M
(3 rows)
Execute a new sync by clicking on
Sync Now
in the connection pane and wait for the sync to complete.
‍
‍
Once complete, you should see that three records have been emitted. Also take note of the
job ID
and
attempt ID
, which are 104 and 0 for this run.



Documentation Source:
airbyte.com/tutorials/incremental-data-synchronization.txt

Documentation Title:
Incremental data synchronization between Postgres databases | Airbyte

Documentation Content:
Execute the following command to open a shell to the destination Postgres database:
docker exec -it airbyte-destination psql --username=postgres
‍
You can then view the names of the tables in the destination with the following command:
\dt;
‍
Which should respond with the following.
List of relations
 Schema |          Name          | Type  |  Owner   
--------+------------------------+-------+----------
 public | _airbyte_raw_table_one | table | postgres
 public | table_one              | table | postgres
(2 rows)
Initial creation: View the raw table in the destination
As a first step in each sync operation, Airbyte copies the records from
table_one
in the source database into a raw table in  the destination database called
_airbyte_raw_table_one
. Look at its contents by executing the following:
SELECT * FROM _airbyte_raw_table_one;
‍
Which should respond with a table that looks as follows:
_airbyte_ab_id            |                                _airbyte_data                                |    _airbyte_emitted_at     
--------------------------------------+-----------------------------------------------------------------------------+----------------------------
 2abc7493-bfc8-4493-ab62-de6ffe094a2d | {"id": 1, "name": "Eg1 IncApp", "updated_at": "2022-09-01T11:01:41.666004"} | 2022-09-01 11:12:03.301+00
 06e67da7-9c6a-46b6-a2e5-e1d102e16c7e | {"id": 2, "name": "Eg2a IncAp", "updated_at": "2022-09-01T11:02:05.017416"} | 2022-09-01 11:12:03.301+00
(2 rows)
‍
In addition to the field containing the source data there are two additional fields in the raw table:
_airbyte_emitted_at
which tells you what time airbyte sent the record to the destination.
_airbyte_ab_id
is a UUID value added by the destination connector to each record before it is sent to the destination.




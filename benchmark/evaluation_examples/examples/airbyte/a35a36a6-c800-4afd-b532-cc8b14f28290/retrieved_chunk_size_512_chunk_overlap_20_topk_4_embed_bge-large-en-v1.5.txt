Documentation Source:
airbyte.com/tutorials/version-control-airbyte-configurations.txt

Documentation Title:
Version control Airbyte configurations with Octavia CLI | Airbyte

Documentation Content:
To create a source definition with Octavia CLI you can use the
octavia generate source
command. You will need to pass a DEFINITION_ID and RESOURCE_NAME. Due to a
current limitation
, to create a source, you first need to get the definition id for the source. You can run the command
octavia list connectors sources
to get the connector id:
octavia list connectors sources | grep postgres

Postgres                                airbyte/source-postgres                        1.0.22            decd338e-5647-4c0b-adf4-da0e75f5a750
Then you can bootstrap a Postgres source with the
octavia generate source
command:
octavia generate source decd338e-5647-4c0b-adf4-da0e75f5a750 postgres

🐙 - Octavia is targetting your Airbyte instance running at http://localhost:8000 on workspace 36ddb450-66e4-4988-91bf-67279eed5098.
✅ - Created the source template for postgres in sources/postgres/configuration.yaml.
The CLI creates a
postgres
folder under sources with a
configuration.yaml
file.
tree .
.
├── api_http_headers.yaml
├── connections
├── destinations
└── sources
    └── postgres
        └── configuration.yaml

4 directories, 2 files
The YAML file contains all the fields with the default values you see on the UI, and the description for each field as a comment. Below you can see the beginning of the file.
more sources/postgres/configuration.yaml 

# Configuration for airbyte/source-postgres
# Documentation about this connector can be found at https://docs.airbyte.com/integrations/sources/postgres
resource_name: "postgres"
definition_type: source
definition_id: decd338e-5647-4c0b-adf4-da0e75f5a750
definition_image: airbyte/source-postgres
definition_version: 1.0.22

# EDIT THE CONFIGURATION BELOW!
configuration:
  ssl: # OPTIONAL | boolean | Encrypt data using SSL. When activating SSL, please select one of the connection modes.



Documentation Source:
airbyte.com/tutorials/version-control-airbyte-configurations.txt

Documentation Title:
Version control Airbyte configurations with Octavia CLI | Airbyte

Documentation Content:
octavia apply

🐙 - Octavia is targetting your Airbyte instance running at http://localhost:8000 on workspace 36ddb450-66e4-4988-91bf-67279eed5098.
🐙 - bigquery does not exists on your Airbyte instance, let's create it!
🎉 - Successfully created bigquery on your Airbyte instance!
💾 - New state for bigquery saved at ./destinations/bigquery/state_36ddb450-66e4-4988-91bf-67279eed5098.yaml
🐙 - postgres exists on your Airbyte instance according to your state file, let's check if we need to update it!
😴 - Did not update because no change detected.
Then you can see that the changes were applied in the UI. Remember to test the connection.
Create a connection with Octavia CLI
Once you have source and destination configuration files, you can create a connection template with the
octavia generate connection
command.
octavia generate connection --source sources/postgres/configuration.yaml --destination destinations/bigquery/configuration.yaml postgres-to-bigquery

🐙 - Octavia is targetting your Airbyte instance running at http://localhost:8000 on workspace 36ddb450-66e4-4988-91bf-67279eed5098.
✅ - Created the connection template for postgres-to-bigquery in connections/postgres_to_bigquery/configuration.yaml.
After editing the configuration, your configuration should look like this:
cat connections/postgres_to_bigquery/configuration.yaml

definition_type: connection
resource_name: "postgres-to-bigquery"
source_configuration_path: sources/postgres/configuration.yaml
destination_configuration_path: destinations/bigquery/configuration.yaml

configuration:
  status: active
  namespace_definition: source
  namespace_format: "${SOURCE_NAMESPACE}"
  prefix: ""
  resource_requirements:
    cpu_limit: ""
    cpu_request: ""
    memory_limit: ""
    memory_request: ""
  schedule_type: manual
  sync_catalog: # OPTIONAL | object | 🚨 ONLY edit streams.config, streams.stream should not be edited as schema cannot be changed.



Documentation Source:
airbyte.com/tutorials/version-control-airbyte-configurations.txt

Documentation Title:
Version control Airbyte configurations with Octavia CLI | Airbyte

Documentation Content:
More precisely, you will learn how to:
Bootstrap an Octavia CLI project
Import the configuration of an existing instance
Create a
Postgres source
configuration in YAML
Create a
BigQuery destination
configuration in YAML
Create a Postgres to BigQuery connection configuration in YAML
Edit YAML configuration files
Apply configurations to a different instance
Prerequisites
Docker and Docker Compose installed.
An
Airbyte open-source
instance. This tutorial uses Airbyte v0:40:18 running locally with Docker Compose.
A Postgres instance or another source you can use instead. Follow this
Postgres replication
tutorial to create a Postgres database locally with sample data.
A BigQuery instance or another destination you can use instead. Follow this
Postgres to BigQuery
tutorial to configure a BigQuery project.
Bootstrap an Octavia CLI project
You can install Octavia CLI as a command available in your bash profile with Docker or modify your Airbyte docker-compose.yml file to apply the configuration on start. You can explore these three modes in the
Octavia CLI documentation
. Note that you should install the same Octavia version as the targetted Airbyte instance to avoid
API incompatibility issues
.
Here you can install the latest Octavia version as a bash command:
curl -s -o- https://raw.githubusercontent.com/airbytehq/airbyte/master/octavia-cli/install.sh | bash

octavia alias will be added to /home/ari/.bashrc
🐙 - 💾 The octavia env file was created at /home/ari/.octavia
❓ - Allow Airbyte to collect telemetry to improve the CLI? (Y/n)Y
🐙 - Pulling image for octavia 0.40.18
🐙 - 🎉 octavia 0.40.18 image was pulled
🐙 - 🎉 octavia alias was added to /home/ari/.bashrc!
🐙 - Please open a new terminal window or run source /home/ari/.bashrc
The .octavia file is where you configure environment variables and secrets. The file content will be used to set the environment variables of the Octavia CLI container that runs when you call the octavia command.



Documentation Source:
airbyte.com/tutorials/version-control-airbyte-configurations.txt

Documentation Title:
Version control Airbyte configurations with Octavia CLI | Airbyte

Documentation Content:
If an error occurs, you will get a stack trace from the API response.
octavia apply

🐙 - Octavia is targetting your Airbyte instance running at http://localhost:8000 on workspace 36ddb450-66e4-4988-91bf-67279eed5098.
🐙 - postgres does not exists on your Airbyte instance, let's create it!
🎉 - Successfully created postgres on your Airbyte instance!
💾 - New state for postgres saved at ./sources/postgres/state_36ddb450-66e4-4988-91bf-67279eed5098.yaml
Then you can check that the configuration is also available in the UI.
After you apply some configuration changes with Octavia, no connection test will be run like when you save connector settings in the UI (see
GitHub issue
). You can still use the UI to test that the source setting allows Airbyte to connect.
‍
After you apply some changes, Octavia creates a
state.yaml
file in the resource directory with the checksum of the latest configuration applied and the generation timestamp. The state files are instance and workspace specific so they are only useful when multiple users or Octavia CLI processes work on the same instance and workspace. If you apply the same configuration across multiple instances, then you don’t need to commit state files in your Git repository.
Each time you run the apply command, Octavia will also compute and display differences between the current resource state locally including changes since you last run the apply command, and the state in your Airbyte instance including changes you may have done on the UI.




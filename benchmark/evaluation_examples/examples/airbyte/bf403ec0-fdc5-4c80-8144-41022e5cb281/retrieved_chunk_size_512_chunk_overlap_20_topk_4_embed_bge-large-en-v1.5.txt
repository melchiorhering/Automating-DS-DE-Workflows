Documentation Source:
airbyte.com/tutorials/incremental-data-synchronization.txt

Documentation Title:
Incremental data synchronization between Postgres databases | Airbyte

Documentation Content:
Execute the following command to open a shell to the destination Postgres database:
docker exec -it airbyte-destination psql --username=postgres
‍
You can then view the names of the tables in the destination with the following command:
\dt;
‍
Which should respond with the following.
List of relations
 Schema |          Name          | Type  |  Owner   
--------+------------------------+-------+----------
 public | _airbyte_raw_table_one | table | postgres
 public | table_one              | table | postgres
(2 rows)
Initial creation: View the raw table in the destination
As a first step in each sync operation, Airbyte copies the records from
table_one
in the source database into a raw table in  the destination database called
_airbyte_raw_table_one
. Look at its contents by executing the following:
SELECT * FROM _airbyte_raw_table_one;
‍
Which should respond with a table that looks as follows:
_airbyte_ab_id            |                                _airbyte_data                                |    _airbyte_emitted_at     
--------------------------------------+-----------------------------------------------------------------------------+----------------------------
 2abc7493-bfc8-4493-ab62-de6ffe094a2d | {"id": 1, "name": "Eg1 IncApp", "updated_at": "2022-09-01T11:01:41.666004"} | 2022-09-01 11:12:03.301+00
 06e67da7-9c6a-46b6-a2e5-e1d102e16c7e | {"id": 2, "name": "Eg2a IncAp", "updated_at": "2022-09-01T11:02:05.017416"} | 2022-09-01 11:12:03.301+00
(2 rows)
‍
In addition to the field containing the source data there are two additional fields in the raw table:
_airbyte_emitted_at
which tells you what time airbyte sent the record to the destination.
_airbyte_ab_id
is a UUID value added by the destination connector to each record before it is sent to the destination.



Documentation Source:
airbyte.com/tutorials/postgres-replication.txt

Documentation Title:
Postgres Replication: Data Transfer Efficiency | Airbyte

Documentation Content:
Destination Stream Prefix:
I added the prefix
tutorial_
so my table will be created as
tutorial_users.
Then, it’s time to configure the streams, which in this case are the tables in our database. If we expand the tables, we can see the columns they have. We can also see they’re part of the
public
namespace or schema. The destination schema will be also
public
.
Now, you should select a sync mode. I chose
Full refresh | Overwrite
to sync the
cities
table and
Incremental | Append
for the
users
table since it has an
id
column (primary key) suitable for the incremental cursor field. The most important thing to note is that you can have different sync modes for each table! Learn more about sync modes in
our documentation
.
Once you’re ready, save the changes. Then, you can run your first sync by clicking on “Sync now.” You can check your run logs to verify everything is going well. Just wait for the sync to be completed, and that’s it! You’ve synchronized two Postgres databases.
Step 4: Verify that the sync worked
Now, let's verify that this worked. Let's output the contents of the destination database:
docker exec airbyte-destination psql -U postgres -c "SELECT * FROM public.tutorial_users;"
docker exec airbyte-destination psql -U postgres -c "SELECT * FROM public.tutorial_cities;"
You should see the rows from the source database inside the destination database. Note that Airbyte added extra columns which contain metadata used to support synchronization.
Wrapping up
In this tutorial, you learned about PostgreSQL native replication and how to synchronize two Postgres databases with Airbyte. Apart from being straightforward, Airbyte is also highly flexible when it comes to selecting different synchronization methods for your replication.
If you enjoyed using Airbyte, you might want to check our fully managed solution:
Airbyte Cloud
.
We also invite you to
‍join the conversation
on our community Slack Channel to share your ideas with thousands of data engineers and help make everyone’s project a success. With Airbyte, the integration possibilities are endless, and we can't wait to see what you will build.



Documentation Source:
airbyte.com/tutorials/incremental-data-synchronization.txt

Documentation Title:
Incremental data synchronization between Postgres databases | Airbyte

Documentation Content:
If you wish to view this database for yourself, you can login to it as follows:
docker exec -ti airbyte-db psql -U docker -d airbyte
The contents of the state database can be viewed with the following command:
SELECT * FROM state;
Which should respond with a table similar to the one given below (note that the response is abbreviated in this article for conciseness):
id                  |            connection_id             |                                                                                                  state                                                                   |          created_at           |          updated_at           | stream_name | namespace |  type  
--------------------------------------+--------------------------------------+--------------------------------------------------------------------------------------------------------------------------------------------------------------------------+-------------------------------+-------------------------------+-------------+-----------+--------
 884a10a7-1c58-4456-af44-c617eec0c1fb | 78cb42b9-e857-4f93-b159-e590ec31d287 | {"state": {"cdc": false, "streams": [{"cursor": "2022-09-02T07:55:58.324989", "stream_name": "table_one", "cursor_field": ["updated_at"], "stream_namespace": "public"}]}} | 2022-09-01 16:52:44.619871+00 | 2022-09-02 07:59:27.304753+00 |             |           | LEGACY
Why and when is a primary key required
Records that are inserted
or updated
on a source system are replicated by Airbyte to the destination during a sync operation, and initially stored in a raw data table. If a given document is updated and synchronized multiple times, the raw data table will have multiple entries for that record (as will be seen in the hands-on deep-dive later in this article).
If an Airbyte user has selected the Incremental Sync - Deduped History sync mode, then the data must be deduplicated so that a single entry in the source table only results in a single corresponding entry in the final normalized deduplicated destination table, even though multiple versions corresponding to that record may appear in the raw and historic data tables. A primary key field is used by Airbyte to select only the most recent version of a given record from the history table for inclusion in the final deduplicated table, and all other historical versions of that record are not included.



Documentation Source:
airbyte.com/tutorials/full-data-synchronization.txt

Documentation Title:
Explore Airbyte's full refresh data synchronization | Airbyte

Documentation Content:
This is easiest to see for yourself via a hands-on example, as presented below.
Create a full refresh append connection
Set up a new connection that will demonstrate
full refresh | append
functionality, using the connectors that you created earlier in this tutorial.
First, select
Postgres-source
as the source for this connection.
‍
Then select
Postgres-destination
as the destination for this connection.
‍
Then create a new connection and name it
full-refresh-append
, set the prefix to
append
_ ,
and select
full refresh | append
as the sync mode, as shown below.
A sync should automatically start after you create the connection. Wait for the sync to complete, and you should see a message like the following:
‍
Open a Postgres terminal on the destination
If you don’t already have a shell open to your Postgres destination, execute the following commands:
docker exec -it airbyte-destination /bin/bash
psql --username=postgres
‍
You can view the tables in the destination Postgres database by executing the following command from the Postgres shell that you have just opened .
\dt;
‍
Which should respond with the following:
List of relations
 Schema |                   Name                   | Type  |  Owner   
--------+------------------------------------------+-------+----------
 public | _airbyte_raw_append_full_refresh_demo    | table | postgres
 public | _airbyte_raw_overwrite_full_refresh_demo | table | postgres
 public | append_full_refresh_demo                 | table | postgres
 public | overwrite_full_refresh_demo              | table | postgres
(4 rows)
‍
Two new tables have been created,
_airbyte_raw_append_full_refresh_demo
and
append_full_refresh_demo
.
You can look at the raw data as follows:
SELECT * FROM  _airbyte_raw_append_full_refresh_demo;
‍
Which should respond with a table that looks very similar to the raw table that you saw created with
full refresh | overwrite
replication, as follows:
_airbyte_ab_id            |        _airbyte_data        |    _airbyte_emitted_at     
--------------------------------------+-----------------------------+----------------------------
 972a8d74-d840-4c43-826e-b0a1042c1681 | {"id": 1,




{
    "id": "99a0ef1f-7415-477b-8c85-5f3671761ab6",
    "snapshot": "jupyter",
    "instruction": "Help me build a Decision Tree model to classify the onset of diabetes based on different diagnostic measures. Add codes only to the existing cells, and in the end run all the cells and save the jupyter notebook.\nHere is a step-by-step tutorial from an expert instructing you how to complete it:\nThis task requires you to build a Decision Tree model to classify the onset of diabetes based on different diagnostic measures.\n1. Add the following code below the ``#TODO 1`` comment.\n```python\nX = pima[feature_cols]\ny = pima.label\n```\n2. Add the following code below the ``#TODO 2`` comment. First, instantiate a decision tree model.\n```python\nclf = DecisionTreeClassifier(random_state=SEED)\n```\n3. Then, add the following code afterward to fit the decision tree model.\n```python\nclf = clf.fit(X_train,y_train)\n```\n4. Finally, add the following code afterward to predict the response for the test dataset.\n```python\ny_pred = clf.predict(X_test)\n```\n5. Click the button \"Run\" in the menu bar on the top.\n6. In the drop-down menu, select and click \"Run All Cells\".\n7. Wait until all cells completes running, then click the button \"File\" in the menu bar on the top.\n8. In the drop-down menu, select and click \"Save All\".\nYou can exactly follow the detailed plan above or proactively tackle the task based on the real-time environment interaction by yourself.",
    "source": [
        "https://www.datacamp.com/tutorial/decision-tree-classification-python"
    ],
    "related_apps": [
        "chromium",
        "jupyter"
    ],
    "tags": [
        "cli+gui",
        "traditional_data_processing",
        "verbose"
    ],
    "action_number": 8,
    "config": [
        {
            "type": "copyfile_from_host_to_guest",
            "parameters": {
                "src": "evaluation_examples/examples/jupyter/99a0ef1f-7415-477b-8c85-5f3671761ab6/diabetes.csv",
                "dest": "/home/user/Desktop/diabetes.csv"
            }
        },
        {
            "type": "copyfile_from_host_to_guest",
            "parameters": {
                "src": "evaluation_examples/examples/jupyter/99a0ef1f-7415-477b-8c85-5f3671761ab6/decision_tree.ipynb",
                "dest": "/home/user/Desktop/decision_tree.ipynb"
            }
        },
        {
            "type": "google_chrome_browser",
            "parameters": {
                "debugging_port": 1337,
                "listening_port": 9222,
                "urls": [
                    "https://www.bing.com/"
                ]
            }
        },
        {
            "type": "script_and_execute",
            "parameters": {
                "src": "evaluation_examples/examples/jupyter/99a0ef1f-7415-477b-8c85-5f3671761ab6/init.sh",
                "dest": "/home/user/init.sh"
            }
        },
        {
            "type": "launch",
            "parameters": {
                "command": [
                    "bash",
                    "-c",
                    "source /home/user/anaconda3/etc/profile.d/conda.sh && conda activate jupyter && jupyter lab /home/user/Desktop/decision_tree.ipynb"
                ]
            }
        }
    ],
    "evaluator": {
        "postconfig": [],
        "func": "compare_notebook_outputs",
        "result": {
            "type": "vm_file",
            "path": "/home/user/Desktop/decision_tree.ipynb",
            "dest": "decision_tree.ipynb"
        },
        "expected": {
            "type": "local_file",
            "path": "evaluation_examples/examples/jupyter/99a0ef1f-7415-477b-8c85-5f3671761ab6/decision_tree_gold.ipynb",
            "dest": "decision_tree_gold.ipynb"
        }
    },
    "counterpart": "5085517b-69e9-467a-897b-21b8fd926bde"
}
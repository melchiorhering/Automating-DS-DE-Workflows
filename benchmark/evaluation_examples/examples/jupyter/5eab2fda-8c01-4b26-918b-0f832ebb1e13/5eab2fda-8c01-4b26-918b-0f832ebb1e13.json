{
    "id": "5eab2fda-8c01-4b26-918b-0f832ebb1e13",
    "snapshot": "jupyter",
    "instruction": "Find baby names that appear in all recorded years and sort them in descending order by their total occurrences.\nHere is a step-by-step tutorial from an expert instructing you how to complete it:\nThis task is to find baby names that appear in all recorded years and sort them in descending order by their total occurrences. On the opened jupyter notebook:\n1. Double-click \"result.csv\" to see the predefined format\n2. Double-click \"usa_baby_names.csv\" to preview the us baby data.\n3. Double-click \"notebook.ipynb\" to see the partial finished code.\n4. Scroll down to the bottom, hover your mouse over the blank space at the bottom.\n5. Click button \"Click to add a cell.\"\n6. Copy the code below to this cell:\n```\n\ncursor.execute(\"\"\"\nCREATE TABLE baby_names (\n  year INT,\n  first_name VARCHAR(64),\n  sex VARCHAR(64),\n  num INT\n);\n\"\"\")\nconn.commit()\n\n```\n7. Click button \"Click to add a cell.\"\n8. Copy the code below to this cell:\n\n```\ndf = pd.read_csv('usa_baby_names.csv')\ndf.to_sql('baby_names', conn, if_exists='append', index=False)\nconn.commit()\nquery = \"\"\"\nSELECT first_name, SUM(num) as total_num\nFROM baby_names\nGROUP BY first_name\nHAVING COUNT(DISTINCT year) >= 101\nORDER BY total_num DESC;\n\"\"\"\nresult = pd.read_sql_query(query, conn)\nresult.to_csv('result.csv', index=False)\nconn.close()\n\n```\n9. Click the button \"Run\" in the menu bar on the top.\n10. In the drop-down menu, select and click \"Run All Cells\".\n11. Wait for about 10 seconds, the data will be inserted in to \"result.csv\"\nYou can exactly follow the detailed plan above or proactively tackle the task based on the real-time environment interaction by yourself.",
    "source": [
        "https://www.kaggle.com/code/dillonmyrick/sql-beginner-to-advanced-with-practical-examples/notebook"
    ],
    "related_apps": [
        "chromium",
        "jupyter"
    ],
    "tags": [
        "cli+gui",
        "traditional_data_processing",
        "verbose"
    ],
    "action_number": 11,
    "config": [
        {
            "type": "copyfile_from_host_to_guest",
            "parameters": {
                "src": "evaluation_examples/examples/jupyter/5eab2fda-8c01-4b26-918b-0f832ebb1e13/usa_baby_names.csv",
                "dest": "/home/user/Desktop/usa_baby_names.csv"
            }
        },
        {
            "type": "copyfile_from_host_to_guest",
            "parameters": {
                "src": "evaluation_examples/examples/jupyter/5eab2fda-8c01-4b26-918b-0f832ebb1e13/baby_names.db",
                "dest": "/home/user/Desktop/baby_names.db"
            }
        },
        {
            "type": "copyfile_from_host_to_guest",
            "parameters": {
                "src": "evaluation_examples/examples/jupyter/5eab2fda-8c01-4b26-918b-0f832ebb1e13/notebook.ipynb",
                "dest": "/home/user/Desktop/notebook.ipynb"
            }
        },
        {
            "type": "copyfile_from_host_to_guest",
            "parameters": {
                "src": "evaluation_examples/examples/jupyter/5eab2fda-8c01-4b26-918b-0f832ebb1e13/result.csv",
                "dest": "/home/user/Desktop/result.csv"
            }
        },
        {
            "type": "google_chrome_browser",
            "parameters": {
                "debugging_port": 1337,
                "listening_port": 9222,
                "urls": [
                    "https://www.bing.com/"
                ]
            }
        },
        {
            "type": "script_and_execute",
            "parameters": {
                "src": "evaluation_examples/examples/jupyter/5eab2fda-8c01-4b26-918b-0f832ebb1e13/init.sh",
                "dest": "/home/user/init.sh"
            }
        },
        {
            "type": "launch",
            "parameters": {
                "command": [
                    "bash",
                    "-c",
                    "source /home/user/anaconda3/etc/profile.d/conda.sh && conda activate jupyter && jupyter lab /home/user/Desktop"
                ]
            }
        }
    ],
    "evaluator": {
        "func": "compare_csv",
        "result": {
            "type": "vm_file",
            "path": "/home/user/Desktop/result.csv",
            "dest": "pred.csv"
        },
        "expected": {
            "type": "local_file",
            "path": "evaluation_examples/examples/jupyter/5eab2fda-8c01-4b26-918b-0f832ebb1e13/gold.csv",
            "dest": "gold.csv"
        }
    },
    "counterpart": "f650d0be-7222-42ea-9f78-5e59b31b37e3"
}
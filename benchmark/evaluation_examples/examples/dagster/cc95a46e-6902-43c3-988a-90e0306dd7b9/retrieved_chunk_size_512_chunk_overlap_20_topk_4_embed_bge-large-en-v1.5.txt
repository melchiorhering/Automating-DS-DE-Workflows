Documentation Source:
release-1-7-2.dagster.dagster-docs.io/concepts/partitions-schedules-sensors/partitioning-assets.txt

Documentation Title:
Partitioning assets | Dagster

Documentation Content:
Prerequisites
#
Before continuing, you should be familiar with:
Software-defined Assets
Jobs
Defining partitioned assets
#
A Software-defined Asset can be assigned a
PartitionsDefinition
, which determines the set of partitions that compose it. If the asset is stored in a filesystem or an object store, then each partition will typically correspond to a file or object. If the asset is stored in a database, then each partition will typically correspond to a range of values in a table that fall within a particular window.
The following example demonstrates creating an asset that has a partition for each day since October 1st, 2023. Materializing partition
2023-11-13
of this asset would result in fetching data from the URL
https://api.nasa.gov/planetary/apod?date=2023-11-13
and storing it at the path
nasa/2023-11-13.csv
. Note that
api_key=DEMO_KEY
is used but has a limited number of calls:
import
os
import
urllib
.
request
# Create a new 'nasa' directory if needed
dir_name
=
"nasa"
if
not
os
.
path
.
exists
(
dir_name
)
:
os
.
makedirs
(
dir_name
)
from
dagster
import
AssetExecutionContext
,
DailyPartitionsDefinition
,
asset
@asset
(
partitions_def
=
DailyPartitionsDefinition
(
start_date
=
"2023-10-01"
)
)
def
my_daily_partitioned_asset
(
context
:
AssetExecutionContext
)
-
>
None
:
partition_date_str
=
context
.
partition_key

    url
=
f"https://api.nasa.gov/planetary/apod?api_key=DEMO_KEY&date=
{
partition_date_str
}
"
target_location
=
f"nasa/
{
partition_date_str
}
.csv"
urllib
.
request
.



Documentation Source:
release-1-7-2.dagster.dagster-docs.io/_apidocs/execution.txt

Documentation Title:
Dagster Docs

Documentation Content:
Examples
partitions_def
=
DailyPartitionsDefinition
(
"2023-08-20"
)
@asset
(
partitions_def
=
partitions_def
)
def
an_asset
(
context
:
AssetExecutionContext
):
context
.
log
.
info
(
context
.
asset_partition_keys_for_output
())
# running a backfill of the 2023-08-21 through 2023-08-25 partitions of this asset will log:
#   ["2023-08-21", "2023-08-22", "2023-08-23", "2023-08-24", "2023-08-25"]
@multi_asset
(
outs
=
{
"first_asset"
:
AssetOut
(
key
=
[
"my_assets"
,
"first_asset"
]),
"second_asset"
:
AssetOut
(
key
=
[
"my_assets"
,
"second_asset"
])
}
partitions_def
=
partitions_def
,
)
def
a_multi_asset
(
context
:
AssetExecutionContext
):
context
.
log
.
info
(
context
.
asset_partition_keys_for_output
(
"first_asset"
))
context
.
log
.
info
(
context
.
asset_partition_keys_for_output
(
"second_asset"
))
# running a backfill of the 2023-08-21 through 2023-08-25 partitions of this asset will log:
#   ["2023-08-21", "2023-08-22", "2023-08-23", "2023-08-24", "2023-08-25"]
#   ["2023-08-21", "2023-08-22", "2023-08-23", "2023-08-24", "2023-08-25"]
@asset
(
partitions_def
=
partitions_def
,
ins
=
{
"self_dependent_asset"
:
AssetIn
(
partition_mapping
=
TimeWindowPartitionMapping
(
start_offset
=-
1
,
end_offset
=-
1
))
}
)
def
self_dependent_asset
(
context
:
AssetExecutionContext
,
self_dependent_asset
):
context
.
log
.
info
(
context
.



Documentation Source:
release-1-7-2.dagster.dagster-docs.io/_apidocs/execution.txt

Documentation Title:
Dagster Docs

Documentation Content:
log
.
info
(
context
.
asset_partitions_time_window_for_input
(
"upstream_asset"
))
# materializing the 2023-08-21 partition of this asset will log:
#   TimeWindow("2023-08-21", "2023-08-22")
# running a backfill of the 2023-08-21 through 2023-08-25 partitions of this asset will log:
#   TimeWindow("2023-08-21", "2023-08-26")
@asset
(
ins
=
{
"upstream_asset"
:
AssetIn
(
partition_mapping
=
TimeWindowPartitionMapping
(
start_offset
=-
1
,
end_offset
=-
1
))
}
partitions_def
=
partitions_def
,
)
def
another_asset
(
context
:
AssetExecutionContext
,
upstream_asset
):
context
.
log
.
info
(
context
.
asset_partitions_time_window_for_input
(
"upstream_asset"
))
# materializing the 2023-08-21 partition of this asset will log:
#   TimeWindow("2023-08-20", "2023-08-21")
# running a backfill of the 2023-08-21 through 2023-08-25 partitions of this asset will log:
#   TimeWindow("2023-08-21", "2023-08-26")
@asset
(
partitions_def
=
partitions_def
,
ins
=
{
"self_dependent_asset"
:
AssetIn
(
partition_mapping
=
TimeWindowPartitionMapping
(
start_offset
=-
1
,
end_offset
=-
1
))
}
)
def
self_dependent_asset
(
context
:
AssetExecutionContext
,
self_dependent_asset
):
context
.
log
.
info
(
context
.




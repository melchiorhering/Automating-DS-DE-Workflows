Documentation Source:
release-1-7-2.dagster.dagster-docs.io/tutorial/scheduling-your-pipeline.txt

Documentation Title:
Tutorial, part five: Scheduling your pipeline | Dagster Docs

Documentation Content:
import
assets

all_assets
=
load_assets_from_modules
(
[
assets
]
)
# Define a job that will materialize the assets
hackernews_job
=
define_asset_job
(
"hackernews_job"
,
selection
=
AssetSelection
.
all
(
)
)
# Addition: a ScheduleDefinition the job it should run and a cron schedule of how frequently to run it
hackernews_schedule
=
ScheduleDefinition
(
job
=
hackernews_job
,
cron_schedule
=
"0 * * * *"
,
# every hour
)
defs
=
Definitions
(
assets
=
all_assets
,
schedules
=
[
hackernews_schedule
]
,
)
Go to the UI, click
Overview > Schedules tab
, and observe your new schedule with the attached job.
To test the change, click the schedule's name to view its details. Click the
Test Schedule
button on the top right corner of the page to trigger the schedule immediately.
Schedules are just one way to start jobs. Jobs can also be run by using the CLI, a Python function, or the UI. Refer to the
Jobs documentation
to learn more.
Other ways to automate your pipelines
#
You've used a schedule to update your data on a regular cadence. However, there are other ways to trigger jobs. For example, sensors can trigger a job after routinely polling a source. Check out the
Automation guide
to learn more.
Next steps
#
By now, you've:
Grouped your objects with a code location
Defined a sequence of materializations with a job
Run the job on a schedule
In the next section, you'll learn how to build more robustness, reusability, and flexibility when
connecting to external services
by using resources.
On This Page
Tutorial, part five: Scheduling your pipeline
Step 1: Defining what assets to update
About definitions
Step 2: Scheduling the materializations
Other ways to automate your pipelines
Next steps
Edit Page on GitHub
Share Feedback
Star



Documentation Source:
release-1-7-2.dagster.dagster-docs.io/tutorial/scheduling-your-pipeline.txt

Documentation Title:
Tutorial, part five: Scheduling your pipeline | Dagster Docs

Documentation Content:
all
(
)
)
defs
=
Definitions
(
assets
=
all_assets
,
jobs
=
[
hackernews_job
]
,
# Addition: add the job to Definitions object (see below)
)
Dagster's
AssetSelection
module lets you choose which assets to attach to a job. In the example above,
AssetSelection.all
selects all assets.
Once you have a job, you can execute it on a schedule, by clicking a button in the Dagster UI, the CLI, or via Dagster's GraphQL endpoints. Confirm that your job was defined by:
Going to the UI
Reloading your project through the
Reload Definitions
button in the asset graph or on the
Deployments
page
Navigating to
Overview > Jobs
Clicking on the job
Seeing your assets selected for the job
About definitions
#
Up until this point, you defined assets using the
@asset
decorator. Dagster definitions are entities that Dagster learns about by importing your code. Just now, you used a different kind of definition: a job definition.
Managing one type of definition, such as assets, is easy. However, it can quickly become unruly as your project grows to have a variety of definitions (ex. schedules, jobs, sensors). To combine definitions and have them aware of each other, Dagster provides a utility called the
Definitions
object.
Step 2: Scheduling the materializations
#
After defining a job, it can be attached to a schedule. A schedule's responsibility is to start a run of the assigned job at a specified time. Schedules are added with the
ScheduleDefinition
class.
To regularly update the assets, add the new
ScheduleDefinition
import, create a new schedule for the
hackernews_job
, and add the schedule to the code location. The code below is how your
__init__.py
should look after making these changes:
from
dagster
import
(
AssetSelection
,
Definitions
,
ScheduleDefinition
,
define_asset_job
,
load_assets_from_modules
,
)
from
.



Documentation Source:
release-1-7-2.dagster.dagster-docs.io/tutorial/scheduling-your-pipeline.txt

Documentation Title:
Tutorial, part five: Scheduling your pipeline | Dagster Docs

Documentation Content:
Tutorial, part five: Scheduling your pipeline | Dagster Docs
Ask AI
Platform
Dagster+
New
Pricing
Blog
Community
Docs
Sign in
Join us on Slack
Star us
Try Dagster+
Platform
Dagster+
Pricing
Blog
Community
Docs
Contact Sales
Sign in
Try Dagster+
Search
the docs
Press
Ctrl
and
K
to search
Getting started
What's Dagster?
Quickstart
Installation
Creating a new project
Getting help
Tutorial
Concepts
Deployment
Integrations
Guides
API Reference
About
1.7.2
/ 0.23.2 (libs)
You are viewing an unreleased or outdated version of the documentation
View Latest Documentation
â†’
Tutorial, part five: Scheduling your pipeline
#
Now that you've written an entire pipeline in Dagster, you will need to run it regularly to keep your assets up to date.
By the end of this part of the tutorial, you'll be able to:
Structure your project with code locations and jobs
Refresh your assets periodically with schedules
Step 1: Defining what assets to update
#
A
job
lets you target a selection of assets to materialize them together as a single action. Assets can belong to multiple jobs.
Your Dagster repository has a file called
tutorial/__init__.py
that is used as a top-level definition for your project. Update the code in this file to add the job using the
define_asset_job
function:
from
dagster
import
(
AssetSelection
,
Definitions
,
define_asset_job
,
load_assets_from_modules
,
)
from
.
import
assets

all_assets
=
load_assets_from_modules
(
[
assets
]
)
# Addition: define a job that will materialize the assets
hackernews_job
=
define_asset_job
(
"hackernews_job"
,
selection
=
AssetSelection
.



Documentation Source:
release-1-7-2.dagster.dagster-docs.io/integrations/dbt/reference.txt

Documentation Title:
dagster-dbt integration reference

Documentation Content:
.
.
daily_dbt_assets_schedule
=
build_schedule_from_dbt_selection
(
[
my_dbt_assets
]
,
job_name
=
"daily_dbt_models"
,
cron_schedule
=
"@daily"
,
dbt_select
=
"tag:daily"
,
)
Scheduling jobs that contain dbt assets and non-dbt assets
#
In many cases, it's useful to be able to schedule dbt assets alongside non-dbt assets. In this example, we build an
AssetSelection
of dbt assets using
build_dbt_asset_selection
, then select all assets (dbt-related or not) which are downstream of these dbt models. From there, we create a job that targets that selection of assets and schedule it to run daily.
from
dagster
import
define_asset_job
,
ScheduleDefinition
from
dagster_dbt
import
build_dbt_asset_selection
,
dbt_assets
@dbt_assets
(
manifest
=
manifest
)
def
my_dbt_assets
(
)
:
.
.
.
# selects all models tagged with "daily", and all their downstream asset dependencies
daily_selection
=
build_dbt_asset_selection
(
[
my_dbt_assets
]
,
dbt_select
=
"tag:daily"
)
.
downstream
(
)
daily_dbt_assets_and_downstream_schedule
=
ScheduleDefinition
(
job
=
define_asset_job
(
"daily_assets"
,
selection
=
daily_selection
)
,
cron_schedule
=
"@daily"
,
)
Refer to the
Schedule documentation
for more info on running jobs on a schedule.
Understanding asset definition attributes
#
In Dagster, each asset definition has attributes. Dagster automatically generates these attributes for each software-defined asset loaded from the dbt project. These attributes can optionally be overridden by the user.
Customizing asset keys
Customizing group names
Customizing owners
Customizing descriptions
Customizing metadata
Customizing tags
Customizing auto-materialize policies
Customizing freshness policies
Customizing asset keys
#
For dbt models, seeds, and snapshots, the default asset key will be the configured schema for that node, concatenated with the name of the node.




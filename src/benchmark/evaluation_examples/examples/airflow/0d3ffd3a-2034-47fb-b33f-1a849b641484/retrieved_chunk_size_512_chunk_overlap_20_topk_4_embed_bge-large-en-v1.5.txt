Documentation Source:
docs.astronomer.io/learn/testing-airflow.txt

Documentation Title:
Test Airflow DAGs | Astronomer Documentation

Documentation Content:
For example, to run
airflow dags test
on the DAG
my_dag
for the execution date of
2023-01-29
run:
astro dev run dags
test
my_dag
'2023-01-29'
The Astro CLI
​
The Astro CLI includes a suite of commands to help simplify common testing workflows. See
Test your Astro project locally
.
Test DAGs in a CI/CD pipeline
​
You can use CI/CD tools to test and deploy your Airflow code. By installing the Astro CLI into your CI/CD process, you can test your DAGs before deploying them to a production environment. See
set up CI/CD
for example implementations.
info
Astronomer customers can use the Astro GitHub integration, which allows you to automatically deploy code from a GitHUb repository to an Astro deployment, viewing Git metadata in the Astro UI. See
Deploy code with the Astro GitHub integration
.
Add test data or files for local testing
​
Use the
include
folder of your Astro project to store files for testing locally, such as test data or a dbt project file. The files in your
include
folder are included in your deploys to Astro, but they are not parsed by Airflow. Therefore, you don't need to specify them in
.airflowignore
to prevent parsing.
If you're running Airflow locally, apply your changes by refreshing the Airflow UI.
Debug interactively with dag.test()
​
The
dag.test()
method allows you to run all tasks in a DAG within a single serialized Python process, without running the Airflow scheduler. The
dag.test()
method lets you iterate faster and use IDE debugging tools when developing DAGs.
This functionality replaces the deprecated DebugExecutor. Learn more in the
Airflow documentation
.
Prerequisites
​
Ensure that your testing environment has:
Airflow 2.5.0
or later. You can check your version by running
airflow version
.
All provider packages that your DAG uses.
An initialized
Airflow metadata database
, if your DAG uses elements of the metadata database like XCom. The Airflow metadata database is created when Airflow is first run in an environment.



Documentation Source:
docs.astronomer.io/astro/migrate-gcc.txt

Documentation Title:
Migrate to Astro from Google Cloud Composer | Astronomer Documentation

Documentation Content:
In your Astro project directory, run
astro dev parse
to check for any parsing errors in your DAGs.
Run
astro run <dag-id>
to test a specific DAG. This command compiles your DAG and runs it in a single Airflow worker container based on your Astro project configurations.
Run
astro dev start
to start a complete Airflow environment on your local machine. After your project starts up, you can access the Airflow UI at
localhost:8080
. See
Troubleshoot your local Airflow environment
.
Note that your migrated Airflow variables and connections are not available locally. You must deploy your project to Astro to test these resources.
Step 9: Deploy to Astro
​
Run the following command to authenticate to Astro:
astro login
Run the following command to deploy your project
astro deploy
This command returns a list of Deployments available in your Workspace and prompts you to pick one.
In the Astro UI, open your Deployment and click
Open Airflow
. Confirm that you can see your deployed DAGs in the Airflow UI.
Step 10: Cut over from your source Airflow environment to Astro
​
After you successfully deploy your code to Astro, you need to migrate your workloads from your source Airflow environment to Astro on a DAG-by-DAG basis. Depending on how your workloads are set up, Astronomer recommends letting DAG owners determine the order to migrate and test DAGs.
You can complete the following steps in the few days or weeks following your migration set up. Provide updates to your Astronomer Data Engineer as they continue to assist you through the process and any solve any difficulties that arise.
Continue to validate and move your DAGs until you have fully cut over your source Airflow instance. After you finish migrating from your source Airflow environment, repeat the complete migration process for any other Airflow instances in your source Airflow environment.
Confirm connections and variables
​
In the Airflow UI for your Deployment,
test all connections
that you migrated from your source Airflow environment.
Additionally, check Airflow variable values in
Admin
>
Variables
.
Test and validate DAGs in Astro
​
To create a strategy for testing DAGs, determine which DAGs need the most care when running and testing them.



Documentation Source:
docs.astronomer.io/learn/debugging-dags.txt

Documentation Title:
Debug DAGs | Astronomer Documentation

Documentation Content:
What is the state of your
Airflow components
? Inspect the logs of each component and restart your Airflow environment if necessary.
Does Airflow have access to all relevant files? This is especially relevant when running Airflow in Docker or when using the
Astro CLI
.
Are your
Airflow connections
set up correctly with correct credentials? See
Troubleshooting connections
.
Is the issue with all DAGs, or is it isolated to one DAG?
Can you collect the relevant logs? For more information on log location and configuration, see the
Airflow logging
guide.
Which versions of Airflow and Airflow providers are you using? Make sure that you're using the correct version of the
Airflow documentation
.
Can you reproduce the problem in a new local Airflow instance using the
Astro CLI
?
Answering these questions will help you narrow down what kind of issue you're dealing with and inform your next steps.
info
You can debug your DAG code with IDE debugging tools using the
dag.test()
method. See
Debug interactively with dag.test()
.
Airflow is not starting on the Astro CLI
​
The 3 most common ways to run Airflow locally are using the
Astro CLI
, running a
standalone instance
, or running
Airflow in Docker
. This guide focuses on troubleshooting the Astro CLI, which is an open source tool for quickly running Airflow on a local machine.
The most common issues related to the Astro CLI are:
The Astro CLI was not correctly installed. Run
astro version
to confirm that you can successfully run Astro CLI commands. If a newer version is available, consider upgrading.
The Docker Daemon is not running. Make sure to start Docker Desktop before starting the Astro CLI.
There are errors caused by custom commands in the Dockerfile, or dependency conflicts with the packages in
packages.txt
and
requirements.txt
.
Airflow components are in a crash-loop because of errors in custom plugins or XCom backends. View scheduler logs using
astro dev logs -s
to troubleshoot.
To troubleshoot infrastructure issues when running Airflow on other platforms, for example in Docker, on Kubernetes using the
Helm Chart
or on managed services, please refer to the relevant documentation and customer support.



Documentation Source:
docs.astronomer.io/astro/manage-dags.txt

Documentation Title:
Manage DAG runs from the Astro UI | Astronomer Documentation

Documentation Content:
Manage DAG runs from the Astro UI | Astronomer Documentation
Skip to main content
Docs
Docs
Find what you're looking for
Learn About Astronomer
Get Started Free
Home
Astro
Astro CLI
Software
Learn
Try Astro
Overview
Get started
Develop
Deploy code
Manage Deployments
Create a Deployment
Deployment settings
Executors
Worker queues
Environment variables
Secrets backend
Manage DAG runs
Automation & CI/CD
Observability
Administration
Release notes
Best practices
Reference
Astro API
Support Knowledge Base
Office Hours
Webinars
Astro Status
Manage Deployments
Manage DAG runs
On this page
Manage DAG runs from the Astro UI
You can perform some common Airflow UI actions from the Astro UI, including:
Marking DAG and task runs as succeeded/failed.
Retrying DAG and task runs.
Viewing DAG and task run statuses.
These actions are available on the
DAGs
page, where you can see detailed information about a specific DAG. This page compiles the most commonly used information and actions from the Airflow UI into one place so that you can manage your DAGs without switching between the Airflow UI and Astro UI.
Access the DAGs page in the Astro UI
​
In the Astro UI, select a Deployment.
Click
DAGs
.
Click the name of the DAG that you want to manage.
Available actions
​
The actions and views on this page are functionally identical to certain actions in the Airflow UI. Use the following table to understand each available Astro UI action and its equivalent action in the Airflow UI.
User action
DAGs
page workflow
Equivalent Airflow UI workflow
Trigger a DAG run.
Click
Run
.
Click the
Play
icon on the
DAGs
page.
View the DAG run
grid
.
None. DAG code appears by default.
Click the DAG name on the
DAGs
page.
View the
graph
for a DAG run.
None. DAG code appears by default.
Click the DAG name on the
DAGs
page, then click
Graph
.
View
task run logs
.
Click the task run in the DAG run grid, then click
Logs
.




{
    "id": "78f98796-62bf-4ab3-bef9-bfee530e2456",
    "snapshot": "airflow",
    "instruction": "I am using Astronomer to deploy Airflow. I would like to implement several test functions on dags and tasks in airflow. The details of these functions are in README.md. Finish these functions in test_dag.py file, restart and trigger the dag for me.\nHere is a step-by-step tutorial from an expert instructing you how to complete it:\nI am using Astronomer to deploy Airflow\nTo create testers to test the settings of the dag file and run the dag, we can follow the steps:\n1. Click the VS Code editor on the left panel or dock;\n2. According to the opened README.md file, we can extract the basic information on completing the test_dag file; \n3. Switch to the DAG file ‘test_dag.py’ that is opened in VSCode, it suppress unnecessary log, ensures the correctness of the file and extract the information of dags in a variable for further use;\n4. We'll now define \"test_dag_schedule_interval\" to test the import and schedule correctness of dags. To be concrete, we check whether dag schedule is set to \"daily\":\nˋˋˋ\n# ... Keep the original ˋtest_dagˋ code\ndef test_dag_schedule_interval():\n    dag = dag_bag.get_dag('activity_suggestion_dag')\n    assert dag.schedule_interval == '@daily', \"DAG schedule interval is not set to daily.\"\nˋˋˋ\n5. We'll now define \"test_task_workflow_order\" to test workflow arrangement. To be concrete, we check whether the workflow of tasks in dag is set to ['fetch_activity', 'log_activity', 'analyze_activity']:\nˋˋˋ\ndef test_task_workflow_order():\n    dag = dag_bag.get_dag('activity_suggestion_dag')\n    task_ids = [task.task_id for task in dag.tasks]\n    expected_order = ['fetch_activity', 'log_activity', 'analyze_activity']\n    assert task_ids == expected_order, f\"Tasks are not in the expected order: {expected_order}\"\nˋˋˋ\n6. Save the file content and switch to the opened ‘/home/user/projects/today_task’ terminal.\n7. In the terminal, type in the following command to restart the UI:\n`astro dev restart` \n8. Click Chromium on the left pannel to open the Airflow web page;\n9. Find \"task_today\" in the DAG list and click the slider to the left of the name to Unpause dag; \n10. Click the triangle under the Action column on the far right of the row to trigger the dag; \n11. Wait until the status of all tasks in the 'Runs' column to change to \"success\" or \"failed\"\nYou can exactly follow the detailed plan above or proactively tackle the task based on the real-time environment interaction by yourself.",
    "source": [
        "https://docs.astronomer.io/learn/testing-airflow#debug-interactively-with-dagtest"
    ],
    "config": [
        {
            "type": "copyfile_from_host_to_guest",
            "parameters": {
                "src": "evaluation_examples/examples/airflow/78f98796-62bf-4ab3-bef9-bfee530e2456/today_task.zip",
                "dest": "/home/user/today_task.zip"
            }
        },
        {
            "type": "script_and_execute",
            "parameters": {
                "src": "evaluation_examples/examples/airflow/78f98796-62bf-4ab3-bef9-bfee530e2456/init.sh",
                "dest": "/home/user/init.sh"
            }
        },
        {
            "type": "google_chrome_browser",
            "parameters": {
                "debugging_port": 1337,
                "listening_port": 9222,
                "urls": [
                    "https://www.bing.com/"
                ]
            }
        },
        {
            "type": "astro_webui_init",
            "parameters": {
                "listening_port": 9222,
                "url": "http://localhost:8080",
                "actions": [
                    {
                        "type": "login",
                        "username": "admin",
                        "password": "admin"
                    }
                ]
            }
        }
    ],
    "action_number": 9,
    "related_apps": [
        "airflow",
        "chromium",
        "docker",
        "terminal",
        "vscode"
    ],
    "tags": [
        "cli+gui",
        "data_orchestration",
        "verbose"
    ],
    "evaluator": {
        "func": "check_include_exclude",
        "result": {
            "type": "vm_script_output",
            "src": "evaluation_examples/examples/airflow/78f98796-62bf-4ab3-bef9-bfee530e2456/eval.sh",
            "dest": "/home/user/eval.sh"
        },
        "expected": {
            "type": "rule",
            "rules": {
                "include": [
                    "succeed"
                ],
                "exclude": [
                    "failed"
                ]
            }
        }
    },
    "counterpart": "7d443060-49a4-4d27-8bde-2ad0f6ae209b"
}
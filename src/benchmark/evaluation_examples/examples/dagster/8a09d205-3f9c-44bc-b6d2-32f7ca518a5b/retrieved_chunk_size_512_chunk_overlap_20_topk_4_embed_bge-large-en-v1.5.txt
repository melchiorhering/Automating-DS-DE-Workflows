Documentation Source:
release-1-7-2.dagster.dagster-docs.io/integrations/dbt/using-dbt-with-dagster/upstream-assets.txt

Documentation Title:
Using Dagster with dbt, part 3: Define assets upstream of your dbt models

Documentation Content:
You'll write Python code that populates this table by fetching data from the web. This will allow you to launch runs that first execute Python code to populate the
raw_customers
table and then invoke dbt to populate the downstream tables.
You'll:
Install the Pandas and DuckDB Python libraries
Define an upstream Dagster asset
In the dbt project, replace a seed with a source
Materialize the assets using the Dagster UI
Step 1: Install the Pandas and DuckDB Python libraries
#
The Dagster asset that you write will fetch data using
Pandas
and write it out to your DuckDB warehouse using
DuckDB's Python API
. To use these, you'll need to install them:
pip
install
pandas duckdb pyarrow
Step 2: Define an upstream Dagster asset
#
To fetch the data the dbt models require, we'll write a Dagster asset for
raw_customers
. We'll put this asset in our
assets.py
file, inside the
jaffle_dagster
directory. This is the file that contains the code that defines our dbt models, which we reviewed at the end of the
last section
. Copy and paste this code to overwrite the existing contents of that file:
import
os
import
duckdb
import
pandas
as
pd
from
dagster
import
AssetExecutionContext
,
asset
from
dagster_dbt
import
DbtCliResource
,
dbt_assets
from
.
constants
import
dbt_manifest_path
,
dbt_project_dir

duckdb_database_path
=
dbt_project_dir
.
joinpath
(
"tutorial.duckdb"
)
@asset
(
compute_kind
=
"python"
)
def
raw_customers
(
context
:
AssetExecutionContext
)
-
>
None
:
data
=
pd
.
read_csv
(
"https://docs.dagster.io/assets/customers.csv"
)
connection
=
duckdb
.
connect
(
os
.
fspath
(
duckdb_database_path
)
)
connection
.



Documentation Source:
release-1-7-2.dagster.dagster-docs.io/integrations/dbt/using-dbt-with-dagster/upstream-assets.txt

Documentation Title:
Using Dagster with dbt, part 3: Define assets upstream of your dbt models

Documentation Content:
connect
(
os
.
fspath
(
duckdb_database_path
)
)
connection
.
execute
(
"create schema if not exists jaffle_shop"
)
connection
.
execute
(
"create or replace table jaffle_shop.raw_customers as select * from data"
)
# Log some metadata about the table we just wrote. It will show up in the UI.
context
.
add_output_metadata
(
{
"num_rows"
:
data
.
shape
[
0
]
}
)
@dbt_assets
(
manifest
=
dbt_manifest_path
)
def
jaffle_shop_dbt_assets
(
context
:
AssetExecutionContext
,
dbt
:
DbtCliResource
)
:
yield
from
dbt
.
cli
(
[
"build"
]
,
context
=
context
)
.
stream
(
)
Let's review the changes we made:
At the top, we added imports for
pandas
and
duckdb
, which we use for fetching data into a
DataFrame
and writing it to DuckDB.
We added a
duckdb_database_path
variable, which holds the location of our DuckDB database. Remember that DuckDB databases are just regular files on the local filesystem. The path is the same path that we used when we configured our
profiles.yml
file. This variable is used in the implementations of the
raw_customers
asset.
We added a definition for the
raw_customers
table by writing a function named
raw_customers
and decorating it with the
@asset
decorator. We labeled it with
compute_kind="python"
to indicate in the Dagster UI that this is an asset defined in Python. The implementation inside the function fetches data from the internet and writes it to a table in our DuckDB database. Similar to how running a dbt model executes a select statement, materializing this asset will execute this Python code.



Documentation Source:
release-1-7-2.dagster.dagster-docs.io/integrations/dbt/using-dbt-with-dagster/upstream-assets.txt

Documentation Title:
Using Dagster with dbt, part 3: Define assets upstream of your dbt models

Documentation Content:
Finally, let's update the
assets
argument of our
Definitions
object, in
definitions.py
, to include the new asset we just defined:
import
os
from
dagster
import
Definitions
from
dagster_dbt
import
DbtCliResource
from
.
assets
import
jaffle_shop_dbt_assets
,
raw_customers
from
.
constants
import
dbt_project_dir
from
.
schedules
import
schedules

defs
=
Definitions
(
assets
=
[
raw_customers
,
jaffle_shop_dbt_assets
]
,
schedules
=
schedules
,
resources
=
{
"dbt"
:
DbtCliResource
(
project_dir
=
os
.
fspath
(
dbt_project_dir
)
)
,
}
,
)
Step 3: In the dbt project, replace a seed with a source
#
Because we're replacing it with a Dagster asset, we no longer need the dbt seed for
raw_customers
, so we can delete it:
cd
..
rm
seeds/raw_customers.csv
Instead, we want to tell dbt that
raw_customers
is a table that is defined outside of the dbt project. We can do that by defining it inside a
dbt source
.
Create a file called
sources.yml
inside the
models/
directory, and put this inside it:
version
:
2
sources
:
-
name
:
jaffle_shop
tables
:
-
name
:
raw_customers
meta
:
dagster
:
asset_key
:
[
"raw_customers"
]
# This metadata specifies the corresponding Dagster asset for this dbt source.
This is a standard dbt source definition, with one addition: it includes metadata, under the
meta
property, that specifies the Dagster asset that it corresponds to. When Dagster reads the contents of the dbt project, it reads this metadata and infers the correspondence.



Documentation Source:
release-1-7-2.dagster.dagster-docs.io/integrations/dbt/using-dbt-with-dagster/set-up-dbt-project.txt

Documentation Title:
Using Dagster with dbt, part 1: Set up the dbt project

Documentation Content:
You'll set up dbt to work with DuckDB by configuring a dbt
profile
:
Navigate into the
jaffle_shop
folder, which was created when you downloaded the project, inside your
tutorial-dbt-dagster
folder:
cd
jaffle_shop
In this folder, with your text editor of choice, create a file named
profiles.yml
and add the following code to it:
jaffle_shop
:
target
:
dev
outputs
:
dev
:
type
:
duckdb
path
:
tutorial.duckdb
threads
:
24
Step 3: Build your dbt project
#
With the profile configured above, your dbt project should now be usable. To test it out, run:
dbt build
This will run all the models, seeds, and snapshots in the project and store a set of tables in your DuckDB database.
What's next?
#
At this point, you should have a fully-configured dbt project that's ready to work with Dagster. The next step is to
load the dbt models into Dagster as assets
.
On This Page
Using dbt with Dagster, part one: Set up the dbt project
Step 1: Download the sample dbt project
Step 2: Configure your dbt project to run with DuckDB
Step 3: Build your dbt project
What's next?
Edit Page on GitHub
Share Feedback
Star




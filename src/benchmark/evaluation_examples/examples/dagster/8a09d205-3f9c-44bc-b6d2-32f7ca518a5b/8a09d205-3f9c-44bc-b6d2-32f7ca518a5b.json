{
    "id": "8a09d205-3f9c-44bc-b6d2-32f7ca518a5b",
    "snapshot": "dagster",
    "instruction": "I have a dbt project \"jaffle_shop\". Please integrate this project into dagster and add a dagster asset \"customers\" according to the schema provided by the file \"~/dbt-dagster-project/jaffle_shop/customers_schema.yml\". Materialize the asset in the opened dagster UI.\nHere is a step-by-step tutorial from an expert instructing you how to complete it:\nI have a dbt project \"jaffle_shop\". Please help me integrate this project into dagster and create a downstream asset. The steps are provided below.\n1. Switch to VS Code.\n2. Use the \"EXPLORER\" to open the folder \"jaffle_shop/jaffle_shop_dagster/jaffle_shop_dagster\".\n3. Open \"assets.py\" file on the right panel.\n4. Modify some parts of the code file `assets.py` to import necessary libraries for later use:\n```\nimport os\n\nimport duckdb # modified\nimport pandas as pd # modified\nfrom dagster import MetadataValue, AssetExecutionContext, asset # modified\nfrom dagster_dbt import DbtCliResource, dbt_assets, get_asset_key_for_model # modified\n\nfrom .constants import dbt_manifest_path, dbt_project_dir\n\nduckdb_database_path = dbt_project_dir.joinpath(\"tutorial.duckdb\") # modified\n\n@dbt_assets(manifest=dbt_manifest_path)\ndef jaffle_shop_dbt_assets(context: AssetExecutionContext, dbt: DbtCliResource):\n    yield from dbt.cli([\"build\"], context=context).stream()\n```\n5. Add the following asset definition to the end of \"assets.py\":\n```\n@asset(\n    compute_kind=\"python\",\n    deps=[get_asset_key_for_model([jaffle_shop_dbt_assets], \"stg_customers\"),\n            get_asset_key_for_model([jaffle_shop_dbt_assets], \"stg_orders\"),\n            get_asset_key_for_model([jaffle_shop_dbt_assets], \"stg_payments\")]\n)\ndef customers(context: AssetExecutionContext):\n    connection = duckdb.connect(os.fspath(duckdb_database_path))\n    customers = connection.sql(\"\"\"\n    with customers as (\n\n        select * from stg_customers\n\n    ),\n\n    orders as (\n\n        select * from stg_orders\n\n    ),\n\n    payments as (\n\n        select * from stg_payments\n\n    ),\n\n    customer_orders as (\n\n            select\n            customer_id,\n\n            min(order_date) as first_order,\n            max(order_date) as most_recent_order,\n            count(order_id) as number_of_orders\n        from orders\n\n        group by customer_id\n\n    ),\n\n    customer_payments as (\n\n        select\n            orders.customer_id,\n            sum(amount) as total_amount\n\n        from payments\n\n        left join orders on\n             payments.order_id = orders.order_id\n\n        group by orders.customer_id\n\n    ),\n\n    final as (\n\n        select\n            customers.customer_id,\n            customers.first_name,\n            customers.last_name,\n            customer_orders.first_order,\n            customer_orders.most_recent_order,\n            customer_orders.number_of_orders,\n            customer_payments.total_amount as customer_lifetime_value\n\n        from customers\n\n        left join customer_orders\n            on customers.customer_id = customer_orders.customer_id\n\n        left join customer_payments\n            on  customers.customer_id = customer_payments.customer_id\n\n    )\n\n    select * from final\n    \"\"\").df()\n    \n    context.add_output_metadata({\"num_rows\": customers.shape[0]})\n    return customers\n```\n6. Save `assets.py` via pressing hotkey \"Ctrl+S\".\n7. Open \"definitions.py\" in the same folder and modify the definitions to include the \"customers\" asset:\n```\nimport os\n\nfrom dagster import Definitions\nfrom dagster_dbt import DbtCliResource\n\nfrom .assets import jaffle_shop_dbt_assets, customers # modified\nfrom .constants import dbt_project_dir\nfrom .schedules import schedules\n\ndefs = Definitions(\n    assets=[jaffle_shop_dbt_assets, customers], # modified\n    schedules=schedules,\n    resources={\n        \"dbt\": DbtCliResource(project_dir=os.fspath(dbt_project_dir)),\n    },\n)\n```\n8. Go to Chromium. Make sure you are in the \"Assets\" tab of the Dagster UI.\n9. Click \"Reload definitions\" on the top-right of the page.\n10. Click \"Materialize\" all under \"Reload definitions\" to materialize all assets, including the one you just created.\n11. Wait until materialization is finished.\nYou can exactly follow the detailed plan above or proactively tackle the task based on the real-time environment interaction by yourself.",
    "source": [
        "https://docs.dagster.io/integrations/dbt/using-dbt-with-dagster"
    ],
    "related_apps": [
        "chromium",
        "dagster",
        "dbt",
        "vscode"
    ],
    "tags": [
        "cli+gui",
        "data_orchestration",
        "verbose"
    ],
    "action_number": 11,
    "config": [
        {
            "type": "copyfile_from_host_to_guest",
            "parameters": {
                "src": "evaluation_examples/examples/dagster/8a09d205-3f9c-44bc-b6d2-32f7ca518a5b/dbt-dagster-proj.zip",
                "dest": "/home/user/dbt-dagster-proj.zip"
            }
        },
        {
            "type": "script_and_execute",
            "parameters": {
                "src": "evaluation_examples/examples/dagster/8a09d205-3f9c-44bc-b6d2-32f7ca518a5b/init.sh",
                "dest": "/home/user/init.sh"
            }
        },
        {
            "type": "google_chrome_browser",
            "parameters": {
                "debugging_port": 1337,
                "listening_port": 9222,
                "urls": [
                    "https://www.bing.com/"
                ]
            }
        },
        {
            "type": "dagster_webui_init",
            "parameters": {
                "listening_port": 9222,
                "url": "http://localhost:3000",
                "actions": [
                    {
                        "type": "close_popups"
                    }
                ]
            }
        }
    ],
    "evaluator": {
        "postconfig": [
            {
                "type": "copyfile_from_host_to_guest",
                "parameters": {
                    "src": "evaluation_examples/examples/dagster/8a09d205-3f9c-44bc-b6d2-32f7ca518a5b/gold_customers.csv",
                    "dest": "/home/user/dbt-dagster-proj/gold_customers.csv"
                }
            },
            {
                "type": "copyfile_from_host_to_guest",
                "parameters": {
                    "src": "evaluation_examples/examples/dagster/8a09d205-3f9c-44bc-b6d2-32f7ca518a5b/export_customers.py",
                    "dest": "/home/user/dbt-dagster-proj/export_customers.py"
                }
            }
        ],
        "func": [
            "check_include_exclude"
        ],
        "result": [
            {
                "type": "vm_script_output",
                "src": "evaluation_examples/examples/dagster/8a09d205-3f9c-44bc-b6d2-32f7ca518a5b/eval.sh",
                "dest": "/home/user/eval.sh"
            }
        ],
        "expected": [
            {
                "type": "rule",
                "rules": {
                    "include": [
                        "succeeded"
                    ],
                    "exclude": [
                        "failed"
                    ]
                }
            }
        ]
    },
    "counterpart": "85e31bb7-9b44-41c2-8fea-a8f9316d0b67"
}
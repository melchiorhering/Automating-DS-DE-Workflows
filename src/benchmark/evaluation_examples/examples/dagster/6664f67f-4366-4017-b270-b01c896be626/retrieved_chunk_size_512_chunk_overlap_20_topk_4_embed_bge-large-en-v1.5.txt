Documentation Source:
release-1-7-2.dagster.dagster-docs.io/guides/dagster-pipes/subprocess/modify-external-code.txt

Documentation Title:
Using Dagster Pipes, Part two: Modify external code | Dagster Docs

Documentation Content:
get
(
)
# send structured metadata back to Dagster
context
.
report_asset_materialization
(
metadata
=
{
"total_orders"
:
total_orders
}
)
if
__name__
==
"__main__"
:
# connect to Dagster Pipes
with
open_dagster_pipes
(
)
:
main
(
)
Then,
total_orders
will show up in the UI as structured metadata:
This metadata will also be displayed on the
Events
tab of the
Asset Details
page in the UI:
Report asset checks
#
Dagster allows you to define and execute data quality checks on assets. Refer to the
Asset Checks
documentation for more information.
If your asset has data quality checks defined, you can report to Dagster that an asset check has been performed via
PipesContext.report_asset_check
:
Report from the external code
Define the asset in the Dagster code
import
pandas
as
pd
from
dagster_pipes
import
PipesContext
,
open_dagster_pipes
def
main
(
)
:
orders_df
=
pd
.
DataFrame
(
{
"order_id"
:
[
1
,
2
]
,
"item_id"
:
[
432
,
878
]
}
)
total_orders
=
len
(
orders_df
)
# get the Dagster Pipes context
context
=
PipesContext
.
get
(
)
# send structured metadata back to Dagster
context
.
report_asset_materialization
(
metadata
=
{
"total_orders"
:
total_orders
}
)
# report data quality check result back to Dagster
context
.
report_asset_check
(
passed
=
orders_df
[
[
"item_id"
]
]
.
notnull
(
)
.
all
(
)
.



Documentation Source:
release-1-7-2.dagster.dagster-docs.io/guides/dagster-pipes/subprocess/modify-external-code.txt

Documentation Title:
Using Dagster Pipes, Part two: Modify external code | Dagster Docs

Documentation Content:
notnull
(
)
.
all
(
)
.
bool
(
)
,
check_name
=
"no_empty_order_check"
,
)
if
__name__
==
"__main__"
:
# connect to Dagster Pipes
with
open_dagster_pipes
(
)
:
main
(
)
import
shutil
from
dagster
import
(
AssetCheckSpec
,
AssetExecutionContext
,
Definitions
,
PipesSubprocessClient
,
asset
,
file_relative_path
,
)
@asset
(
check_specs
=
[
AssetCheckSpec
(
name
=
"no_empty_order_check"
,
asset
=
"subprocess_asset"
)
]
,
)
def
subprocess_asset
(
context
:
AssetExecutionContext
,
pipes_subprocess_client
:
PipesSubprocessClient
)
:
cmd
=
[
shutil
.
which
(
"python"
)
,
file_relative_path
(
__file__
,
"external_code.py"
)
,
]
return
pipes_subprocess_client
.
run
(
command
=
cmd
,
context
=
context
)
.
get_materialize_result
(
)
defs
=
Definitions
(
assets
=
[
subprocess_asset
]
,
resources
=
{
"pipes_subprocess_client"
:
PipesSubprocessClient
(
)
}
,
)
When Dagster executes the code, you’ll see an asset check event with the check result in the UI:
This check result will also be displayed on the
Checks
tab of the
Asset Details
page in the UI:
Finished code
#
At this point, your two files should look like the following:
External code in external_code.py
Dagster code in dagster_code.py
import
pandas
as
pd
from
dagster_pipes
import
PipesContext
,
open_dagster_pipes
def
main
(
)
:
orders_df
=
pd
.
DataFrame
(
{
"order_id"
:
[
1
,
2
]
,
"item_id"
:
[
432
,
878
]
}
)
total_orders
=
len
(
orders_df
)
# get the Dagster Pipes context
context
=
PipesContext
.



Documentation Source:
release-1-7-2.dagster.dagster-docs.io/guides/dagster-pipes/subprocess/modify-external-code.txt

Documentation Title:
Using Dagster Pipes, Part two: Modify external code | Dagster Docs

Documentation Content:
get
(
)
# send structured metadata back to Dagster
context
.
report_asset_materialization
(
metadata
=
{
"total_orders"
:
total_orders
}
)
# report data quality check result back to Dagster
context
.
report_asset_check
(
passed
=
orders_df
[
[
"item_id"
]
]
.
notnull
(
)
.
all
(
)
.
bool
(
)
,
check_name
=
"no_empty_order_check"
,
)
if
__name__
==
"__main__"
:
# connect to Dagster Pipes
with
open_dagster_pipes
(
)
:
main
(
)
import
shutil
from
dagster
import
(
AssetCheckSpec
,
AssetExecutionContext
,
Definitions
,
PipesSubprocessClient
,
asset
,
file_relative_path
,
)
@asset
(
check_specs
=
[
AssetCheckSpec
(
name
=
"no_empty_order_check"
,
asset
=
"subprocess_asset"
)
]
,
)
def
subprocess_asset
(
context
:
AssetExecutionContext
,
pipes_subprocess_client
:
PipesSubprocessClient
)
:
cmd
=
[
shutil
.
which
(
"python"
)
,
file_relative_path
(
__file__
,
"external_code.py"
)
,
]
return
pipes_subprocess_client
.
run
(
command
=
cmd
,
context
=
context
)
.
get_materialize_result
(
)
defs
=
Definitions
(
assets
=
[
subprocess_asset
]
,
resources
=
{
"pipes_subprocess_client"
:
PipesSubprocessClient
(
)
}
,
)
What's next?
#
In this tutorial, you learned how to get access to Dagster Pipes context, report log messages events from the external process, and send structured events back to Dagster.
What's next?



Documentation Source:
release-1-7-2.dagster.dagster-docs.io/guides/dagster-pipes/subprocess/create-subprocess-asset.txt

Documentation Title:
Using Dagster Pipes, Part 1: Define a Dagster asset that invokes subprocess | Dagster Docs

Documentation Content:
DataFrame
(
{
"order_id"
:
[
1
,
2
]
,
"item_id"
:
[
432
,
878
]
}
)
total_orders
=
len
(
orders_df
)
print
(
f"processing total
{
total_orders
}
orders"
)
if
__name__
==
"__main__"
:
main
(
)
Step 1.1: Define the asset
#
First, create a new file named
dagster_code.py
in the same directory as the
external_code.py
file you created earlier in the
Prerequisites
step.
Next, you’ll define the asset. Copy and paste the following into the file:
import
shutil
from
dagster
import
(
AssetExecutionContext
,
MaterializeResult
,
PipesSubprocessClient
,
asset
,
file_relative_path
,
)
@asset
def
subprocess_asset
(
context
:
AssetExecutionContext
,
pipes_subprocess_client
:
PipesSubprocessClient
)
-
>
MaterializeResult
:
cmd
=
[
shutil
.
which
(
"python"
)
,
file_relative_path
(
__file__
,
"external_code.py"
)
]
Here’s what we did in this example:
Created an asset named
subprocess_asset
Provided
AssetExecutionContext
as the
context
argument to the asset. This object provides system information such as resources, config, and logging. We’ll come back to this a bit later in this section.
Specified a resource for the asset to use,
PipesSubprocessClient
. We’ll also come back to this in a little bit.
Declared a command list
cmd
to run the external script. In the list:
First, found the path to the Python executable on the system using
shutil.which("python")
.
Then, provided the file path to the file that we want to execute. In this case, it’s the
external_code.py
file that you created earlier.




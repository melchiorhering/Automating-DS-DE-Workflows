Documentation Source:
airbyte.com/tutorials/validate-data-replication-postgres-snowflake.txt

Documentation Title:
Validate data replication pipelines from Postgres to Snowflake with data-diff | Airbyte

Documentation Content:
First, we are going to start by setting up our Postgres source and Snowflake destination within Airbyte.
Set up your Postgres source
On
Airbyte Cloud
or
Airbyte Open Source
, click “new connection”. This will bring you to a screen where you can select your data source. Choose “
Postgres
” as your source type.
Now you will be brought to a screen where you need to enter some specific information about your Postgres database. This includes host, port, database name, and a list of the schemas you wish to sync.
I kept the default port and added my database named `development`, `customers` schema, and the login information for my Airbyte user. It is best practice to
create users specific to the tools
you are connecting to your database.
Set up your Snowflake destination
Now let’s set up our
Snowflake destination
where we will be replicating our Postgres data to. Start by clicking on “new destination” in the top right corner. Then select “Snowflake” as your destination type.
‍
This is where you will input the information for the Snowflake database that you are copying your Postgres data. Make sure you enter the right location information!
I also recommend setting up a role that is specific for loading data in your destination as well. This will help keep your environment secure and all you to closely monitor different metrics on the replication process.
Set up a Postgres to Snowflake connection
Now that you’ve created both your source in Postgres and your destination in Snowflake, you can set up a connection between the two to replicate your data from Postgres. Select “connections” on the left panel.
Select your Postgres source you created from the dropdown, then select Snowflake as your destination.
Now you’ll want to give the connection a good name and choose how often it replicates. I’m going to call mine “postgres_snowflake_replication” and set it t replicate every 24 hours.
I also recommend selecting “mirror source structure” for the “destination namespace”. This will allow you to easily compare the differences between the source table and the destination table.



Documentation Source:
airbyte.com/tutorials/incremental-data-synchronization.txt

Documentation Title:
Incremental data synchronization between Postgres databases | Airbyte

Documentation Content:
Create a connection between the source and destination
In this section you will create a connection that will be used for demonstrating the functionality of database replication with
Incremental Sync | Append
.
This new connection will make use of the connectors that you have just created.
Create a new connection by clicking on
Connections
and then on
+ New connection
as shown below (Note that this button may appear in the top right corner if you already have some connections instantiated):
‍
Then select the
Incremental-source
source as follows:
‍
Select the
Incremental-destination
as follows:
‍
You will see a set up page as shown below. Set the name of the connection to
incremental-sync-demo
, and configure it as shown below:
‍
There are a few areas that are annotated in the above configuration:
Define the name which will identify this connection - in this case I have called it
incremental-sync-demo
.
Select the
incremental append
replication mode for the table called
table_one
.
Select
updated_at
as the cursor for the
table_one
table.
After you click on
Set up connection
,
the initial sync will start. Once it completes you should see the following status in the
Sync History
:
‍
Make a note of the
job ID
and the
attempt ID
which in this case are 149 and 0 respectively, as can be seen in the path to the
logs.log
(/tmp/workspace/149/0/logs.log) in the screenshot above. You will need these values to find the SQL code used for the first
incremental append
sync.
Initial creation: Overview
In the first synchronization, Airbyte replicates all of the records from the source table into a raw table in the destination database. Then, dbt-generated SQL commands are executed to normalize the raw data into the final destination table as shown below:
‍
Initial creation: Look at the Postgres destination
After the first sync has completed you can take a look at the Postgres destination to see how the replicated data looks.



Documentation Source:
airbyte.com/tutorials/postgres-to-bigquery.txt

Documentation Title:
How to Connect & Load Data from Postgres to BigQuery?

Documentation Content:
7. Test the connection to ensure that Airbyte can successfully connect to your PostgreSQL database.
8. Select the tables or views you want to replicate and configure any necessary settings, such as the replication frequency and the replication method.
9. Save your configuration and start the replication process.
10. Monitor the replication process to ensure that it is running smoothly and troubleshoot any issues that arise.
Step 2: Set up BigQuery as a destination connector
1. First, navigate to the Airbyte dashboard and select the "Destinations" tab on the left-hand side of the screen.
2. Scroll down until you find the "BigQuery" destination connector and click on it.
3. Click the "Create Destination" button to begin setting up your BigQuery destination.
4. Enter your Google Cloud Platform project ID and service account credentials in the appropriate fields.
5. Next, select the dataset you want to use for your destination and enter the table prefix you want to use.
6. Choose the schema mapping for your data, which will determine how your data is organized in BigQuery.
7. Finally, review your settings and click the "Create Destination" button to complete the setup process.
8. Once your destination is created, you can begin configuring your source connectors to start syncing data to BigQuery.
9. To do this, navigate to the "Sources" tab on the left-hand side of the screen and select the source connector you want to use.
10. Follow the prompts to enter your source credentials and configure your sync settings.
11. When you reach the "Destination" step, select your BigQuery destination from the dropdown menu and choose the dataset and table prefix you want to use.
12. Review your settings and click the "Create Connection" button to start syncing data from your source to your BigQuery destination.
Step 3: Set up a connection to sync your Postgres data to BigQuery
Once you've successfully connected Postgres as a data source and BigQuery as a destination in Airbyte, you can set up a data pipeline between them with the following steps:
Create a new connection:
On the Airbyte dashboard, navigate to the 'Connections' tab and click the '+ New Connection' button.
Choose your source:
Select Postgres from the dropdown list of your configured sources.



Documentation Source:
airbyte.com/tutorials/incremental-change-data-capture-cdc-replication.txt

Documentation Title:
Airbyte's incremental Change Data Capture (CDC) replication | Airbyte

Documentation Content:
Then select
Postgres
as the source as follows:
Define a source connector called
cdc-source
as follows, and be sure to select
Logical Replication (CDC)
as demonstrated below”:
After selecting Logical Replication (CDC), enter the parameters that will be used for CDC replication as shown below.
Then click on the
Set up source
button to create the source connector,
Instantiate a Postgres destination connector
Select Postgres as the destination as follows:
Create a destination called
cdc-destination
as follows:
And click on the
Set up destination
button to create the destination connector.
Set up the CDC connection with incremental dedupe synchronization
The orchestration for CDC syncing is similar to non-CDC database sources – in other words, CDC replication works in conjunction with the
various Sync modes
that Airbyte supports. In this tutorial I will demonstrate CDC replication only with the incremental dedupe synchronization mode.
ℹ️ The steps presented in this section could also be used for testing other sync modes.
Define a new connection that will be used for incremental CDC replication as follows:
ℹ️  In the definition of a CDC replication connection, notice that a
cursor field
is not required (as opposed to “standard”
incremental replication
). Furthermore, the
primary key
is automatically determined from the source table, and is therefore not selected.
Once you click on
Set up connection
, Airbyte will start a sync operation from the source to the destination. Once the sync has completed, you should see  a response similar to the following:
‍
View the destination database
Open a Postgres shell to the destination as follows:
docker exec -it airbyte-destination psql --username=postgres
You can then view the names of the tables in the destination with the following command:
\dt;
Which should respond with the following.




Documentation Source:
docs.getdbt.com/guides/microsoft-fabric.txt

Documentation Title:
Quickstart for dbt Cloud and Microsoft Fabric | dbt Developer Hub

Documentation Content:
What should I name my models?
Add tests to your models
​
Adding
tests
to a project helps validate that your models are working correctly.
To add tests to your project:
Create a new YAML file in the
models
directory, named
models/schema.yml
Add the following contents to the file:
models/schema.yml
version
:
2
models
:
-
name
:
customers
columns
:
-
name
:
customer_id
tests
:
-
unique
-
not_null
-
name
:
stg_customers
columns
:
-
name
:
customer_id
tests
:
-
unique
-
not_null
-
name
:
stg_orders
columns
:
-
name
:
order_id
tests
:
-
unique
-
not_null
-
name
:
status
tests
:
-
accepted_values
:
values
:
[
'placed'
,
'shipped'
,
'completed'
,
'return_pending'
,
'returned'
]
-
name
:
customer_id
tests
:
-
not_null
-
relationships
:
to
:
ref('stg_customers')
field
:
customer_id
Run
dbt test
, and confirm that all your tests passed.
When you run
dbt test
, dbt iterates through your YAML files, and constructs a query for each test. Each query will return the number of records that fail the test. If this number is 0, then the test is successful.
FAQs
​
What tests are available for me to use in dbt? Can I add my own custom tests?
Does my test file need to be named `schema.yml`?
Document your models
​
Adding
documentation
to your project allows you to describe your models in rich detail, and share that information with your team. Here, we're going to add some basic documentation to our project.
Update your
models/schema.yml
file to include some descriptions, such as those below.



Documentation Source:
docs.getdbt.com/guides/microsoft-fabric8722.txt

Documentation Title:
Quickstart for dbt Cloud and Microsoft Fabric | dbt Developer Hub

Documentation Content:
What should I name my models?
Add tests to your models
​
Adding
tests
to a project helps validate that your models are working correctly.
To add tests to your project:
Create a new YAML file in the
models
directory, named
models/schema.yml
Add the following contents to the file:
models/schema.yml
version
:
2
models
:
-
name
:
customers
columns
:
-
name
:
customer_id
tests
:
-
unique
-
not_null
-
name
:
stg_customers
columns
:
-
name
:
customer_id
tests
:
-
unique
-
not_null
-
name
:
stg_orders
columns
:
-
name
:
order_id
tests
:
-
unique
-
not_null
-
name
:
status
tests
:
-
accepted_values
:
values
:
[
'placed'
,
'shipped'
,
'completed'
,
'return_pending'
,
'returned'
]
-
name
:
customer_id
tests
:
-
not_null
-
relationships
:
to
:
ref('stg_customers')
field
:
customer_id
Run
dbt test
, and confirm that all your tests passed.
When you run
dbt test
, dbt iterates through your YAML files, and constructs a query for each test. Each query will return the number of records that fail the test. If this number is 0, then the test is successful.
FAQs
​
What tests are available for me to use in dbt? Can I add my own custom tests?
Does my test file need to be named `schema.yml`?
Document your models
​
Adding
documentation
to your project allows you to describe your models in rich detail, and share that information with your team. Here, we're going to add some basic documentation to our project.
Update your
models/schema.yml
file to include some descriptions, such as those below.



Documentation Source:
docs.getdbt.com/guides/microsoft-fabric0c17.txt

Documentation Title:
Quickstart for dbt Cloud and Microsoft Fabric | dbt Developer Hub

Documentation Content:
What should I name my models?
Add tests to your models
​
Adding
tests
to a project helps validate that your models are working correctly.
To add tests to your project:
Create a new YAML file in the
models
directory, named
models/schema.yml
Add the following contents to the file:
models/schema.yml
version
:
2
models
:
-
name
:
customers
columns
:
-
name
:
customer_id
tests
:
-
unique
-
not_null
-
name
:
stg_customers
columns
:
-
name
:
customer_id
tests
:
-
unique
-
not_null
-
name
:
stg_orders
columns
:
-
name
:
order_id
tests
:
-
unique
-
not_null
-
name
:
status
tests
:
-
accepted_values
:
values
:
[
'placed'
,
'shipped'
,
'completed'
,
'return_pending'
,
'returned'
]
-
name
:
customer_id
tests
:
-
not_null
-
relationships
:
to
:
ref('stg_customers')
field
:
customer_id
Run
dbt test
, and confirm that all your tests passed.
When you run
dbt test
, dbt iterates through your YAML files, and constructs a query for each test. Each query will return the number of records that fail the test. If this number is 0, then the test is successful.
FAQs
​
What tests are available for me to use in dbt? Can I add my own custom tests?
Does my test file need to be named `schema.yml`?
Document your models
​
Adding
documentation
to your project allows you to describe your models in rich detail, and share that information with your team. Here, we're going to add some basic documentation to our project.
Update your
models/schema.yml
file to include some descriptions, such as those below.



Documentation Source:
docs.getdbt.com/guides/microsoft-fabric5f72.txt

Documentation Title:
Quickstart for dbt Cloud and Microsoft Fabric | dbt Developer Hub

Documentation Content:
What should I name my models?
Add tests to your models
​
Adding
tests
to a project helps validate that your models are working correctly.
To add tests to your project:
Create a new YAML file in the
models
directory, named
models/schema.yml
Add the following contents to the file:
models/schema.yml
version
:
2
models
:
-
name
:
customers
columns
:
-
name
:
customer_id
tests
:
-
unique
-
not_null
-
name
:
stg_customers
columns
:
-
name
:
customer_id
tests
:
-
unique
-
not_null
-
name
:
stg_orders
columns
:
-
name
:
order_id
tests
:
-
unique
-
not_null
-
name
:
status
tests
:
-
accepted_values
:
values
:
[
'placed'
,
'shipped'
,
'completed'
,
'return_pending'
,
'returned'
]
-
name
:
customer_id
tests
:
-
not_null
-
relationships
:
to
:
ref('stg_customers')
field
:
customer_id
Run
dbt test
, and confirm that all your tests passed.
When you run
dbt test
, dbt iterates through your YAML files, and constructs a query for each test. Each query will return the number of records that fail the test. If this number is 0, then the test is successful.
FAQs
​
What tests are available for me to use in dbt? Can I add my own custom tests?
Does my test file need to be named `schema.yml`?
Document your models
​
Adding
documentation
to your project allows you to describe your models in rich detail, and share that information with your team. Here, we're going to add some basic documentation to our project.
Update your
models/schema.yml
file to include some descriptions, such as those below.




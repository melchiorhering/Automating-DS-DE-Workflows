Documentation Source:
docs.getdbt.com/docs/build/snapshots.txt

Documentation Title:
Add snapshots to your DAG | dbt Developer Hub

Documentation Content:
You can also configure your snapshot from your
dbt_project.yml
file (
docs
).
snapshots/orders_snapshot.sql
{
%
snapshot
orders_snapshot
%
}
{{
config
(
target_database
=
'analytics'
,
target_schema
=
'snapshots'
,
unique_key
=
'id'
,
strategy
=
'timestamp'
,
updated_at
=
'updated_at'
,
)
}}
select
*
from
{{ source
(
'jaffle_shop'
,
'orders'
)
}}
{
%
endsnapshot
%
}
Run the
dbt snapshot
command
— for our example a new table will be created at
analytics.snapshots.orders_snapshot
. You can change the
target_database
configuration, the
target_schema
configuration and the name of the snapshot (as defined in
{% snapshot .. %}
) will change how dbt names this table.
$ dbt snapshot
Running with dbt=0.16.0
15:07:36 | Concurrency: 8 threads (target='dev')
15:07:36 |
15:07:36 | 1 of 1 START snapshot snapshots.orders_snapshot...... [RUN]
15:07:36 | 1 of 1 OK snapshot snapshots.orders_snapshot..........[SELECT 3 in 1.82s]
15:07:36 |
15:07:36 | Finished running 1 snapshots in 0.68s.
Completed successfully
Done. PASS=2 ERROR=0 SKIP=0 TOTAL=1
Inspect the results by selecting from the table dbt created. After the first run, you should see the results of your query, plus the
snapshot meta fields
as described below.
Run the
snapshot
command again, and inspect the results. If any records have been updated, the snapshot should reflect this.
Select from the
snapshot
in downstream models using the
ref
function.
models/changed_orders.sql
select
*
from
{{ ref
(
'orders_snapshot'
)
}}
Schedule the
snapshot
command to run regularly — snapshots are only useful if you run them frequently.
Detecting row changes
​
Snapshot "strategies" define how dbt knows if a row has changed. There are two strategies built-in to dbt —
timestamp
and
check
.



Documentation Source:
docs.getdbt.com/docs/build/sources.txt

Documentation Title:
Add sources to your DAG | dbt Developer Hub

Documentation Content:
Add
schema
only if you want to use a source name that differs from the existing schema.
If you're not already familiar with these files, be sure to check out
the documentation on schema.yml files
before proceeding.
Selecting from a source
​
Once a source has been defined, it can be referenced from a model using the
{{ source()}}
function
.
models/orders.sql
select
.
.
.
from
{{ source
(
'jaffle_shop'
,
'orders'
)
}}
left
join
{{ source
(
'jaffle_shop'
,
'customers'
)
}}
using
(
customer_id
)
dbt will compile this to the full
table
name:
target/compiled/jaffle_shop/models/my_model.sql
select
.
.
.
from
raw
.
jaffle_shop
.
orders
left
join
raw
.
jaffle_shop
.
customers
using
(
customer_id
)
Using the
{{ source () }}
function also creates a dependency between the model and the source table.
The source function tells dbt a model is dependent on a source
Testing and documenting sources
​
You can also:
Add data tests to sources
Add descriptions to sources, that get rendered as part of your documentation site
These should be familiar concepts if you've already added tests and descriptions to your models (if not check out the guides on
testing
and
documentation
).
models/<filename>.yml
version
:
2
sources
:
-
name
:
jaffle_shop
description
:
This is a replica of the Postgres database used by our app
tables
:
-
name
:
orders
description
:
>
One record per order. Includes cancelled and deleted orders.
columns
:
-
name
:
id
description
:
Primary key of the orders table
tests
:
-
unique
-
not_null
-
name
:
status
description
:
Note that the status can change over time
-
name
:
...
-
name
:
...
You can find more details on the available properties for sources in the
reference section
.
FAQs
​
Snapshotting source data freshness
​
With a couple of extra configs, dbt can optionally snapshot the "freshness" of the data in your source tables.



Documentation Source:
docs.getdbt.com/guides/mesh-qsd41b.txt

Documentation Title:
Quickstart with dbt Mesh | dbt Developer Hub

Documentation Content:
Then, click
Run now
to trigger the job.
Trigger a job by clicking the 'Run now' button.
After the run is complete, click
Explore
from the upper menu bar. You should now see your lineage, tests, and documentation coming through successfully.
Reference a public model in your downstream project
​
In this section, you will set up the downstream project, "Jaffle | Finance", and
cross-project reference
the
fct_orders
model from the foundational project. Navigate to the
Develop
page to set up our project:
If you’ve also started with a new git repo, click
Initialize dbt project
under the
Version control
section.
Delete the
models/example
folder
Navigate to the
dbt_project.yml
file and remove lines 39-42 (the
my_new_project
model reference).
In the
File Explorer
, hover over the project directory, click the
...
and Select
Create file
.
Name the file
dependencies.yml
.
Create file in the dbt Cloud IDE.
Add the upstream
analytics
project and the
dbt_utils
package. Click
Save
.
dependencies.yml
packages
:
-
package
:
dbt
-
labs/dbt_utils
version
:
1.1.1
projects
:
-
name
:
analytics
Staging layer
​
Now that you've set up the foundational project, let's start building the data assets. Set up the staging layer as follows:
Create a new YAML file
models/staging/sources.yml
and declare the sources by copying the following into the file and clicking
Save
.
models/staging/sources.yml
version
:
2
sources
:
-
name
:
stripe
database
:
raw
schema
:
stripe
tables
:
-
name
:
payment
Create
models/staging/stg_payments.sql
to select from the
payment
table in the
stripe
source.



Documentation Source:
docs.getdbt.com/guides/mesh-qs0c17.txt

Documentation Title:
Quickstart with dbt Mesh | dbt Developer Hub

Documentation Content:
Then, click
Run now
to trigger the job.
Trigger a job by clicking the 'Run now' button.
After the run is complete, click
Explore
from the upper menu bar. You should now see your lineage, tests, and documentation coming through successfully.
Reference a public model in your downstream project
​
In this section, you will set up the downstream project, "Jaffle | Finance", and
cross-project reference
the
fct_orders
model from the foundational project. Navigate to the
Develop
page to set up our project:
If you’ve also started with a new git repo, click
Initialize dbt project
under the
Version control
section.
Delete the
models/example
folder
Navigate to the
dbt_project.yml
file and remove lines 39-42 (the
my_new_project
model reference).
In the
File Explorer
, hover over the project directory, click the
...
and Select
Create file
.
Name the file
dependencies.yml
.
Create file in the dbt Cloud IDE.
Add the upstream
analytics
project and the
dbt_utils
package. Click
Save
.
dependencies.yml
packages
:
-
package
:
dbt
-
labs/dbt_utils
version
:
1.1.1
projects
:
-
name
:
analytics
Staging layer
​
Now that you've set up the foundational project, let's start building the data assets. Set up the staging layer as follows:
Create a new YAML file
models/staging/sources.yml
and declare the sources by copying the following into the file and clicking
Save
.
models/staging/sources.yml
version
:
2
sources
:
-
name
:
stripe
database
:
raw
schema
:
stripe
tables
:
-
name
:
payment
Create
models/staging/stg_payments.sql
to select from the
payment
table in the
stripe
source.



